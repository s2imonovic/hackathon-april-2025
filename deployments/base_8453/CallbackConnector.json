{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.26\"},\"sources\":{\"contracts/CallbackConnector.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.26;\\n\\nimport {RevertContext, RevertOptions} from \\\"@zetachain/protocol-contracts/contracts/Revert.sol\\\";\\nimport \\\"@zetachain/protocol-contracts/contracts/evm/GatewayEVM.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract CallbackConnector is Ownable {\\n    GatewayEVM public immutable gateway;\\n    address public universalContract;\\n\\n    // Events\\n    event CallbackReceived(uint256 indexed orderId);\\n    event CallbackSent(uint256 indexed orderId);\\n    event RevertEvent(string, RevertContext);\\n    event HelloEvent(string, string);\\n\\n    error Unauthorized();\\n\\n    modifier onlyGateway() {\\n        if (msg.sender != address(gateway)) revert Unauthorized();\\n        _;\\n    }\\n\\n    constructor(address payable gatewayAddress, address _universalContract) Ownable(msg.sender) {\\n        gateway = GatewayEVM(gatewayAddress);\\n        universalContract = _universalContract;\\n    }\\n\\n    // Set the universal contract address\\n    function setUniversalContract(address _universalContract) external onlyOwner {\\n        universalContract = _universalContract;\\n    }\\n\\n    // simply call back to ZetaOrderBook contract\\n    function priceCheckCallback(uint256 orderId) internal onlyGateway {\\n        emit CallbackReceived(orderId);\\n\\n        RevertOptions memory revertOptions = RevertOptions({\\n            revertAddress: address(0),\\n            callOnRevert: false,\\n            abortAddress: address(0),\\n            revertMessage: \\\"\\\",\\n            onRevertGasLimit: 300000\\n        });\\n\\n        // Create message for callback\\n        bytes memory message = abi.encodeWithSignature(\\n            \\\"checkAndExecuteOrder(uint256)\\\",\\n            orderId\\n        );\\n\\n        // Immediately call back to ZetaChain\\n        gateway.call(\\n            universalContract,\\n            message,\\n            revertOptions\\n        );\\n\\n        emit CallbackSent(orderId);\\n    }\\n\\n    // Required gateway interface methods\\n    function onCall(\\n        MessageContext calldata context,\\n        bytes calldata message\\n    ) external payable onlyGateway returns (bytes4) {\\n        uint256 orderId = abi.decode(message[4:], (uint256));\\n        priceCheckCallback(orderId);\\n        return \\\"\\\";\\n    }\\n\\n    function onRevert(\\n        RevertContext calldata revertContext\\n    ) external onlyGateway {\\n        emit RevertEvent(\\\"Revert from ZetaChain\\\", revertContext);\\n    }\\n\\n    // Fallback function\\n    fallback() external payable {}\\n}\\n\",\"versionPragma\":\"0.8.26\"},\"@zetachain/protocol-contracts/contracts/Revert.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\n/// @notice Struct containing revert options\\n/// @param revertAddress Address to receive revert.\\n/// @param callOnRevert Flag if onRevert hook should be called.\\n/// @param abortAddress Address to receive funds if aborted.\\n/// @param revertMessage Arbitrary data sent back in onRevert.\\n/// @param onRevertGasLimit Gas limit for revert tx, unused on GatewayZEVM methods\\nstruct RevertOptions {\\n    address revertAddress;\\n    bool callOnRevert;\\n    address abortAddress;\\n    bytes revertMessage;\\n    uint256 onRevertGasLimit;\\n}\\n\\n/// @notice Struct containing revert context passed to onRevert.\\n/// @param sender Address of account that initiated smart contract call.\\n/// @param asset Address of asset. On a connected chain, it contains the fungible\\n/// token address or is empty if it's a gas token. On ZetaChain, it contains the\\n/// address of the ZRC20.\\n/// @param amount Amount specified with the transaction.\\n/// @param revertMessage Arbitrary data sent back in onRevert.\\nstruct RevertContext {\\n    address sender;\\n    address asset;\\n    uint256 amount;\\n    bytes revertMessage;\\n}\\n\\n/// @notice Struct containing abort context passed to onAbort.\\n/// @param sender Address of account that initiated smart contract call.\\n/// bytes is used as the crosschain transaction can be initiated from a non-EVM chain.\\n/// @param asset Address of asset. On a connected chain, it contains the fungible\\n/// token address or is empty if it's a gas token. On ZetaChain, it contains the\\n/// address of the ZRC20.\\n/// @param amount Amount specified with the transaction.\\n/// @param outgoing Flag to indicate if the crosschain transaction was outgoing: from ZetaChain to connected chain.\\n/// if false, the transaction was incoming: from connected chain to ZetaChain.\\n/// @param chainID Chain ID of the connected chain.\\n/// @param revertMessage Arbitrary data specified in the RevertOptions object when initating the crosschain transaction.\\nstruct AbortContext {\\n    bytes sender;\\n    address asset;\\n    uint256 amount;\\n    bool outgoing;\\n    uint256 chainID;\\n    bytes revertMessage;\\n}\\n\\n/// @title Revertable\\n/// @notice Interface for contracts that support revertable calls.\\ninterface Revertable {\\n    /// @notice Called when a revertable call is made.\\n    /// @param revertContext Revert context to pass to onRevert.\\n    function onRevert(RevertContext calldata revertContext) external;\\n}\\n\\n/// @title Abortable\\n/// @notice Interface for contracts that support abortable calls.\\ninterface Abortable {\\n    /// @notice Called when a revertable call is aborted.\\n    /// @param abortContext Abort context to pass to onAbort.\\n    function onAbort(AbortContext calldata abortContext) external;\\n}\\n\",\"versionPragma\":\"0.8.26\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@zetachain/protocol-contracts/contracts/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\n/// @title INotSupportedMethods\\n/// @notice Interface for contracts that with non supported methods.\\ninterface INotSupportedMethods {\\n    error ZETANotSupported();\\n    error CallOnRevertNotSupported();\\n}\\n\",\"versionPragma\":\"0.8.26\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {IERC1967} from \\\"../../interfaces/IERC1967.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This library provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit IERC1967.Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit IERC1967.AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the ERC-1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit IERC1967.BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.22\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC-1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC-1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC-1967 compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC-1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.22\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@zetachain/protocol-contracts/contracts/evm/interfaces/IGatewayEVM.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nimport \\\"../../../contracts/Revert.sol\\\";\\n\\n/// @title IGatewayEVMEvents\\n/// @notice Interface for the events emitted by the GatewayEVM contract.\\ninterface IGatewayEVMEvents {\\n    /// @notice Emitted when a contract call is executed.\\n    /// @param destination The address of the contract called.\\n    /// @param value The amount of ETH sent with the call.\\n    /// @param data The calldata passed to the contract call.\\n    event Executed(address indexed destination, uint256 value, bytes data);\\n\\n    /// @notice Emitted when a contract call is reverted.\\n    /// @param to The address of the contract called.\\n    /// @param token The address of the ERC20 token, empty if gas token\\n    /// @param amount The amount of ETH sent with the call.\\n    /// @param data The calldata passed to the contract call.\\n    /// @param revertContext Revert context to pass to onRevert.\\n    event Reverted(address indexed to, address indexed token, uint256 amount, bytes data, RevertContext revertContext);\\n\\n    /// @notice Emitted when a contract call with ERC20 tokens is executed.\\n    /// @param token The address of the ERC20 token.\\n    /// @param to The address of the contract called.\\n    /// @param amount The amount of tokens transferred.\\n    /// @param data The calldata passed to the contract call.\\n    event ExecutedWithERC20(address indexed token, address indexed to, uint256 amount, bytes data);\\n\\n    /// @notice Emitted when a deposit is made.\\n    /// @param sender The address of the sender.\\n    /// @param receiver The address of the receiver.\\n    /// @param amount The amount of ETH or tokens deposited.\\n    /// @param asset The address of the ERC20 token (zero address if ETH).\\n    /// @param payload The calldata passed with the deposit. No longer used. Kept to maintain compatibility.\\n    /// @param revertOptions Revert options.\\n    event Deposited(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 amount,\\n        address asset,\\n        bytes payload,\\n        RevertOptions revertOptions\\n    );\\n\\n    /// @notice Emitted when a deposit and call is made.\\n    /// @param sender The address of the sender.\\n    /// @param receiver The address of the receiver.\\n    /// @param amount The amount of ETH or tokens deposited.\\n    /// @param asset The address of the ERC20 token (zero address if ETH).\\n    /// @param payload The calldata passed with the deposit.\\n    /// @param revertOptions Revert options.\\n    event DepositedAndCalled(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 amount,\\n        address asset,\\n        bytes payload,\\n        RevertOptions revertOptions\\n    );\\n\\n    /// @notice Emitted when an omnichain smart contract call is made without asset transfer.\\n    /// @param sender The address of the sender.\\n    /// @param receiver The address of the receiver.\\n    /// @param payload The calldata passed to the call.\\n    /// @param revertOptions Revert options.\\n    event Called(address indexed sender, address indexed receiver, bytes payload, RevertOptions revertOptions);\\n\\n    /// @notice Emitted when tss address is updated\\n    /// @param oldTSSAddress old tss address\\n    /// @param newTSSAddress new tss address\\n    event UpdatedGatewayTSSAddress(address oldTSSAddress, address newTSSAddress);\\n}\\n\\n/// @title IGatewayEVMErrors\\n/// @notice Interface for the errors used in the GatewayEVM contract.\\ninterface IGatewayEVMErrors {\\n    /// @notice Error for failed execution.\\n    error ExecutionFailed();\\n\\n    /// @notice Error for failed deposit.\\n    error DepositFailed();\\n\\n    /// @notice Error for insufficient ETH amount.\\n    error InsufficientETHAmount();\\n\\n    /// @notice Error for insufficient ERC20 token amount.\\n    error InsufficientERC20Amount();\\n\\n    /// @notice Error for zero address input.\\n    error ZeroAddress();\\n\\n    /// @notice Error for failed token approval.\\n    error ApprovalFailed();\\n\\n    /// @notice Error for already initialized custody.\\n    error CustodyInitialized();\\n\\n    /// @notice Error for already initialized connector.\\n    error ConnectorInitialized();\\n\\n    /// @notice Error when trying to transfer not whitelisted token to custody.\\n    error NotWhitelistedInCustody();\\n\\n    /// @notice Error when trying to call onCall method using arbitrary call.\\n    error NotAllowedToCallOnCall();\\n\\n    /// @notice Error when trying to call onRevert method using arbitrary call.\\n    error NotAllowedToCallOnRevert();\\n\\n    /// @notice Error indicating payload size exceeded in external functions.\\n    error PayloadSizeExceeded();\\n}\\n\\n/// @title IGatewayEVM\\n/// @notice Interface for the GatewayEVM contract.\\ninterface IGatewayEVM is IGatewayEVMErrors, IGatewayEVMEvents {\\n    /// @notice Executes a call to a contract using ERC20 tokens.\\n    /// @param messageContext Message context containing sender and arbitrary call flag.\\n    /// @param token The address of the ERC20 token.\\n    /// @param to The address of the contract to call.\\n    /// @param amount The amount of tokens to transfer.\\n    /// @param data The calldata to pass to the contract call.\\n    function executeWithERC20(\\n        MessageContext calldata messageContext,\\n        address token,\\n        address to,\\n        uint256 amount,\\n        bytes calldata data\\n    )\\n        external;\\n\\n    /// @notice Transfers msg.value to destination contract and executes it's onRevert function.\\n    /// @dev This function can only be called by the TSS address and it is payable.\\n    /// @param destination Address to call.\\n    /// @param data Calldata to pass to the call.\\n    /// @param revertContext Revert context to pass to onRevert.\\n    function executeRevert(\\n        address destination,\\n        bytes calldata data,\\n        RevertContext calldata revertContext\\n    )\\n        external\\n        payable;\\n\\n    /// @notice Executes a call to a destination address without ERC20 tokens.\\n    /// @dev This function can only be called by the TSS address and it is payable.\\n    /// @param messageContext Message context containing sender and arbitrary call flag.\\n    /// @param destination Address to call.\\n    /// @param data Calldata to pass to the call.\\n    /// @return The result of the call.\\n    function execute(\\n        MessageContext calldata messageContext,\\n        address destination,\\n        bytes calldata data\\n    )\\n        external\\n        payable\\n        returns (bytes memory);\\n\\n    /// @notice Executes a revertable call to a contract using ERC20 tokens.\\n    /// @param token The address of the ERC20 token.\\n    /// @param to The address of the contract to call.\\n    /// @param amount The amount of tokens to transfer.\\n    /// @param data The calldata to pass to the contract call.\\n    /// @param revertContext Revert context to pass to onRevert.\\n    function revertWithERC20(\\n        address token,\\n        address to,\\n        uint256 amount,\\n        bytes calldata data,\\n        RevertContext calldata revertContext\\n    )\\n        external;\\n\\n    /// @notice Deposits ETH to the TSS address.\\n    /// @param receiver Address of the receiver.\\n    /// @param revertOptions Revert options.\\n    function deposit(address receiver, RevertOptions calldata revertOptions) external payable;\\n\\n    /// @notice Deposits ERC20 tokens to the custody or connector contract.\\n    /// @param receiver Address of the receiver.\\n    /// @param amount Amount of tokens to deposit.\\n    /// @param asset Address of the ERC20 token.\\n    /// @param revertOptions Revert options.\\n    function deposit(address receiver, uint256 amount, address asset, RevertOptions calldata revertOptions) external;\\n\\n    /// @notice Deposits ETH to the TSS address and calls an omnichain smart contract.\\n    /// @param receiver Address of the receiver.\\n    /// @param payload Calldata to pass to the call.\\n    /// @param revertOptions Revert options.\\n    function depositAndCall(\\n        address receiver,\\n        bytes calldata payload,\\n        RevertOptions calldata revertOptions\\n    )\\n        external\\n        payable;\\n\\n    /// @notice Deposits ERC20 tokens to the custody or connector contract and calls an omnichain smart contract.\\n    /// @param receiver Address of the receiver.\\n    /// @param amount Amount of tokens to deposit.\\n    /// @param asset Address of the ERC20 token.\\n    /// @param payload Calldata to pass to the call.\\n    /// @param revertOptions Revert options.\\n    function depositAndCall(\\n        address receiver,\\n        uint256 amount,\\n        address asset,\\n        bytes calldata payload,\\n        RevertOptions calldata revertOptions\\n    )\\n        external;\\n\\n    /// @notice Calls an omnichain smart contract without asset transfer.\\n    /// @param receiver Address of the receiver.\\n    /// @param payload Calldata to pass to the call.\\n    /// @param revertOptions Revert options.\\n    function call(address receiver, bytes calldata payload, RevertOptions calldata revertOptions) external;\\n}\\n\\n/// @notice Message context passed to execute function.\\n/// @param sender Sender from omnichain contract.\\nstruct MessageContext {\\n    address sender;\\n}\\n\\n/// @notice Interface implemented by contracts receiving authenticated calls.\\ninterface Callable {\\n    function onCall(MessageContext calldata context, bytes calldata message) external payable returns (bytes memory);\\n}\\n\",\"versionPragma\":\"0.8.26\"},\"@zetachain/protocol-contracts/contracts/evm/interfaces/IZetaConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nimport { RevertContext } from \\\"../../../contracts/Revert.sol\\\";\\n\\n/// @title IZetaConnectorEvents\\n/// @notice Interface for the events emitted by the ZetaConnector contracts.\\ninterface IZetaConnectorEvents {\\n    /// @notice Emitted when tokens are withdrawn.\\n    /// @param to The address to which the tokens are withdrawn.\\n    /// @param amount The amount of tokens withdrawn.\\n    event Withdrawn(address indexed to, uint256 amount);\\n\\n    /// @notice Emitted when tokens are withdrawn and a contract is called.\\n    /// @param to The address to which the tokens are withdrawn.\\n    /// @param amount The amount of tokens withdrawn.\\n    /// @param data The calldata passed to the contract call.\\n    event WithdrawnAndCalled(address indexed to, uint256 amount, bytes data);\\n\\n    /// @notice Emitted when tokens are withdrawn and a contract is called with a revert callback.\\n    /// @param to The address to which the tokens are withdrawn.\\n    /// @param amount The amount of tokens withdrawn.\\n    /// @param data The calldata passed to the contract call.\\n    /// @param revertContext Revert context to pass to onRevert.\\n    event WithdrawnAndReverted(address indexed to, uint256 amount, bytes data, RevertContext revertContext);\\n\\n    /// @notice Emitted when tss address is updated\\n    /// @param oldTSSAddress old tss address\\n    /// @param newTSSAddress new tss address\\n    event UpdatedZetaConnectorTSSAddress(address oldTSSAddress, address newTSSAddress);\\n}\\n\",\"versionPragma\":\"0.8.26\"},\"@zetachain/protocol-contracts/contracts/evm/ZetaConnectorBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { RevertContext } from \\\"../../contracts/Revert.sol\\\";\\nimport {\\n    IGatewayEVM,\\n    IGatewayEVMErrors,\\n    IGatewayEVMEvents,\\n    MessageContext\\n} from \\\"../../contracts/evm/interfaces/IGatewayEVM.sol\\\";\\nimport \\\"../../contracts/evm/interfaces/IZetaConnector.sol\\\";\\n\\n/// @title ZetaConnectorBase\\n/// @notice Abstract base contract for ZetaConnector.\\n/// @dev This contract implements basic functionality for handling tokens and interacting with the Gateway contract.\\nabstract contract ZetaConnectorBase is\\n    Initializable,\\n    UUPSUpgradeable,\\n    IZetaConnectorEvents,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    AccessControlUpgradeable\\n{\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Error indicating that a zero address was provided.\\n    error ZeroAddress();\\n\\n    /// @notice The Gateway contract used for executing cross-chain calls.\\n    IGatewayEVM public gateway;\\n    /// @notice The address of the Zeta token.\\n    address public zetaToken;\\n    /// @notice The address of the TSS (Threshold Signature Scheme) contract.\\n    address public tssAddress;\\n\\n    /// @notice New role identifier for withdrawer role.\\n    bytes32 public constant WITHDRAWER_ROLE = keccak256(\\\"WITHDRAWER_ROLE\\\");\\n    /// @notice New role identifier for pauser role.\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    /// @notice New role identifier for tss role.\\n    bytes32 public constant TSS_ROLE = keccak256(\\\"TSS_ROLE\\\");\\n\\n    /// @notice Initializer for ZetaConnectors.\\n    /// @dev Set admin as default admin and pauser, and tssAddress as tss role.\\n    function initialize(\\n        address gateway_,\\n        address zetaToken_,\\n        address tssAddress_,\\n        address admin_\\n    )\\n        public\\n        virtual\\n        initializer\\n    {\\n        if (gateway_ == address(0) || zetaToken_ == address(0) || tssAddress_ == address(0) || admin_ == address(0)) {\\n            revert ZeroAddress();\\n        }\\n\\n        __UUPSUpgradeable_init();\\n        __ReentrancyGuard_init();\\n        __AccessControl_init();\\n        __Pausable_init();\\n\\n        gateway = IGatewayEVM(gateway_);\\n        zetaToken = zetaToken_;\\n        tssAddress = tssAddress_;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin_);\\n        _grantRole(WITHDRAWER_ROLE, tssAddress_);\\n        _grantRole(TSS_ROLE, tssAddress_);\\n        _grantRole(PAUSER_ROLE, admin_);\\n        _grantRole(PAUSER_ROLE, tssAddress_);\\n    }\\n\\n    /// @dev Authorizes the upgrade of the contract, sender must be owner.\\n    /// @param newImplementation Address of the new implementation.\\n    function _authorizeUpgrade(address newImplementation) internal override onlyRole(DEFAULT_ADMIN_ROLE) { }\\n\\n    /// @notice Update tss address\\n    /// @param newTSSAddress new tss address\\n    function updateTSSAddress(address newTSSAddress) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (newTSSAddress == address(0)) revert ZeroAddress();\\n\\n        _revokeRole(WITHDRAWER_ROLE, tssAddress);\\n        _revokeRole(TSS_ROLE, tssAddress);\\n\\n        _grantRole(WITHDRAWER_ROLE, newTSSAddress);\\n        _grantRole(TSS_ROLE, newTSSAddress);\\n\\n        emit UpdatedZetaConnectorTSSAddress(tssAddress, newTSSAddress);\\n\\n        tssAddress = newTSSAddress;\\n    }\\n\\n    /// @notice Pause contract.\\n    function pause() external onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    /// @notice Unpause contract.\\n    function unpause() external onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    /// @notice Withdraw tokens to a specified address.\\n    /// @param to The address to withdraw tokens to.\\n    /// @param amount The amount of tokens to withdraw.\\n    /// @param internalSendHash A hash used for internal tracking of the transaction.\\n    function withdraw(address to, uint256 amount, bytes32 internalSendHash) external virtual;\\n\\n    /// @notice Withdraw tokens and call a contract through Gateway.\\n    /// @param messageContext Message context containing sender.\\n    /// @param to The address to withdraw tokens to.\\n    /// @param amount The amount of tokens to withdraw.\\n    /// @param data The calldata to pass to the contract call.\\n    /// @param internalSendHash A hash used for internal tracking of the transaction.\\n    function withdrawAndCall(\\n        MessageContext calldata messageContext,\\n        address to,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes32 internalSendHash\\n    )\\n        external\\n        virtual;\\n\\n    /// @notice Withdraw tokens and call a contract with a revert callback through Gateway.\\n    /// @param to The address to withdraw tokens to.\\n    /// @param amount The amount of tokens to withdraw.\\n    /// @param data The calldata to pass to the contract call.\\n    /// @param internalSendHash A hash used for internal tracking of the transaction.\\n    /// @param revertContext Revert context to pass to onRevert.\\n    function withdrawAndRevert(\\n        address to,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes32 internalSendHash,\\n        RevertContext calldata revertContext\\n    )\\n        external\\n        virtual;\\n\\n    /// @notice Handle received tokens.\\n    /// @param amount The amount of tokens received.\\n    function receiveTokens(uint256 amount) external virtual;\\n}\\n\",\"versionPragma\":\"0.8.26\"},\"@zetachain/protocol-contracts/contracts/evm/interfaces/IERC20Custody.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nimport { RevertContext } from \\\"../../../contracts/Revert.sol\\\";\\n\\nimport { MessageContext } from \\\"./IGatewayEVM.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title IERC20CustodyEvents\\n/// @notice Interface for the events emitted by the ERC20 custody contract.\\ninterface IERC20CustodyEvents {\\n    /// @notice Emitted when tokens are withdrawn.\\n    /// @param token The address of the ERC20 token.\\n    /// @param to The address receiving the tokens.\\n    /// @param amount The amount of tokens withdrawn.\\n    event Withdrawn(address indexed to, address indexed token, uint256 amount);\\n\\n    /// @notice Emitted when tokens are withdrawn and a contract call is made.\\n    /// @param to The address receiving the tokens.\\n    /// @param token The address of the ERC20 token.\\n    /// @param amount The amount of tokens withdrawn.\\n    /// @param data The calldata passed to the contract call.\\n    event WithdrawnAndCalled(address indexed to, address indexed token, uint256 amount, bytes data);\\n\\n    /// @notice Emitted when tokens are withdrawn and a revertable contract call is made.\\n    /// @param to The address receiving the tokens.\\n    /// @param token The address of the ERC20 token.\\n    /// @param amount The amount of tokens withdrawn.\\n    /// @param data The calldata passed to the contract call.\\n    /// @param revertContext Revert context to pass to onRevert.\\n    event WithdrawnAndReverted(\\n        address indexed to, address indexed token, uint256 amount, bytes data, RevertContext revertContext\\n    );\\n\\n    /// @notice Emitted when ERC20 token is whitelisted\\n    /// @param token address of ERC20 token.\\n    event Whitelisted(address indexed token);\\n\\n    /// @notice Emitted when ERC20 token is unwhitelisted\\n    /// @param token address of ERC20 token.\\n    event Unwhitelisted(address indexed token);\\n\\n    /// @notice Emitted in legacy deposit method.\\n    event Deposited(bytes recipient, IERC20 indexed asset, uint256 amount, bytes message);\\n\\n    /// @notice Emitted when tss address is updated\\n    /// @param oldTSSAddress old tss address\\n    /// @param newTSSAddress new tss address\\n    event UpdatedCustodyTSSAddress(address oldTSSAddress, address newTSSAddress);\\n}\\n\\n/// @title IERC20CustodyErrors\\n/// @notice Interface for the errors used in the ERC20 custody contract.\\ninterface IERC20CustodyErrors {\\n    /// @notice Error for zero address input.\\n    error ZeroAddress();\\n    /// @notice Error for not whitelisted ERC20 token\\n    error NotWhitelisted();\\n    /// @notice Error for calling not supported legacy methods.\\n    error LegacyMethodsNotSupported();\\n}\\n\\ninterface IERC20Custody is IERC20CustodyEvents, IERC20CustodyErrors {\\n    /// @notice Mapping of whitelisted tokens => true/false.\\n    function whitelisted(address token) external view returns (bool);\\n\\n    /// @notice Withdraw directly transfers the tokens to the destination address without contract call.\\n    /// @dev This function can only be called by the TSS address.\\n    /// @param token Address of the ERC20 token.\\n    /// @param to Destination address for the tokens.\\n    /// @param amount Amount of tokens to withdraw.\\n    function withdraw(address token, address to, uint256 amount) external;\\n\\n    /// @notice WithdrawAndCall transfers tokens to Gateway and call a contract through the Gateway.\\n    /// @dev This function can only be called by the TSS address.\\n    /// @param messageContext Message context containing sender.\\n    /// @param token Address of the ERC20 token.\\n    /// @param to Address of the contract to call.\\n    /// @param amount Amount of tokens to withdraw.\\n    /// @param data Calldata to pass to the contract call.\\n    function withdrawAndCall(\\n        MessageContext calldata messageContext,\\n        address token,\\n        address to,\\n        uint256 amount,\\n        bytes calldata data\\n    )\\n        external;\\n\\n    /// @notice WithdrawAndRevert transfers tokens to Gateway and call a contract with a revert functionality through\\n    /// the Gateway.\\n    /// @dev This function can only be called by the TSS address.\\n    /// @param token Address of the ERC20 token.\\n    /// @param to Address of the contract to call.\\n    /// @param amount Amount of tokens to withdraw.\\n    /// @param data Calldata to pass to the contract call.\\n    /// @param revertContext Revert context to pass to onRevert.\\n    function withdrawAndRevert(\\n        address token,\\n        address to,\\n        uint256 amount,\\n        bytes calldata data,\\n        RevertContext calldata revertContext\\n    )\\n        external;\\n}\\n\",\"versionPragma\":\"0.8.26\"},\"@zetachain/protocol-contracts/contracts/evm/GatewayEVM.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nimport { INotSupportedMethods } from \\\"../../contracts/Errors.sol\\\";\\nimport { RevertContext, RevertOptions, Revertable } from \\\"../../contracts/Revert.sol\\\";\\nimport { ZetaConnectorBase } from \\\"./ZetaConnectorBase.sol\\\";\\nimport { IERC20Custody } from \\\"./interfaces/IERC20Custody.sol\\\";\\nimport { Callable, IGatewayEVM, MessageContext } from \\\"./interfaces/IGatewayEVM.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/// @title GatewayEVM\\n/// @notice The GatewayEVM contract is the endpoint to call smart contracts on external chains.\\n/// @dev The contract doesn't hold any funds and should never have active allowances.\\ncontract GatewayEVM is\\n    Initializable,\\n    AccessControlUpgradeable,\\n    UUPSUpgradeable,\\n    IGatewayEVM,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    INotSupportedMethods\\n{\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice The address of the custody contract.\\n    address public custody;\\n    /// @notice The address of the TSS (Threshold Signature Scheme) contract.\\n    address public tssAddress;\\n    /// @notice The address of the ZetaConnector contract.\\n    address public zetaConnector;\\n    /// @notice The address of the Zeta token contract.\\n    address public zetaToken;\\n\\n    /// @notice New role identifier for tss role.\\n    bytes32 public constant TSS_ROLE = keccak256(\\\"TSS_ROLE\\\");\\n    /// @notice New role identifier for asset handler role.\\n    bytes32 public constant ASSET_HANDLER_ROLE = keccak256(\\\"ASSET_HANDLER_ROLE\\\");\\n    /// @notice New role identifier for pauser role.\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    /// @notice Max size of payload + revertOptions revert message.\\n    uint256 public constant MAX_PAYLOAD_SIZE = 1024;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initialize with tss address. address of zeta token and admin account set as DEFAULT_ADMIN_ROLE.\\n    /// @dev Using admin to authorize upgrades and pause, and tss for tss role.\\n    function initialize(address tssAddress_, address zetaToken_, address admin_) public initializer {\\n        if (tssAddress_ == address(0) || zetaToken_ == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        __UUPSUpgradeable_init();\\n        __ReentrancyGuard_init();\\n        __AccessControl_init();\\n        __Pausable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin_);\\n        _grantRole(PAUSER_ROLE, admin_);\\n        _grantRole(PAUSER_ROLE, tssAddress_);\\n        tssAddress = tssAddress_;\\n        _grantRole(TSS_ROLE, tssAddress_);\\n\\n        zetaToken = zetaToken_;\\n    }\\n\\n    /// @dev Authorizes the upgrade of the contract, sender must be owner.\\n    /// @param newImplementation Address of the new implementation.\\n    function _authorizeUpgrade(address newImplementation) internal override onlyRole(DEFAULT_ADMIN_ROLE) { }\\n\\n    /// @notice Update tss address\\n    /// @param newTSSAddress new tss address\\n    function updateTSSAddress(address newTSSAddress) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (newTSSAddress == address(0)) revert ZeroAddress();\\n\\n        _revokeRole(TSS_ROLE, tssAddress);\\n        _grantRole(TSS_ROLE, newTSSAddress);\\n\\n        emit UpdatedGatewayTSSAddress(tssAddress, newTSSAddress);\\n\\n        tssAddress = newTSSAddress;\\n    }\\n\\n    /// @notice Pause contract.\\n    function pause() external onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    /// @notice Unpause contract.\\n    function unpause() external onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    /// @notice Transfers msg.value to destination contract and executes it's onRevert function.\\n    /// @dev This function can only be called by the TSS address and it is payable.\\n    /// @param destination Address to call.\\n    /// @param data Calldata to pass to the call.\\n    function executeRevert(\\n        address destination,\\n        bytes calldata data,\\n        RevertContext calldata revertContext\\n    )\\n        public\\n        payable\\n        nonReentrant\\n        onlyRole(TSS_ROLE)\\n        whenNotPaused\\n    {\\n        if (destination == address(0)) revert ZeroAddress();\\n        (bool success,) = destination.call{ value: msg.value }(\\\"\\\");\\n        if (!success) revert ExecutionFailed();\\n        Revertable(destination).onRevert(revertContext);\\n\\n        emit Reverted(destination, address(0), msg.value, data, revertContext);\\n    }\\n\\n    /// @notice Executes a call to a destination address without ERC20 tokens.\\n    /// @dev This function can only be called by the TSS address and it is payable.\\n    /// @param messageContext Message context containing sender.\\n    /// @param destination Address to call.\\n    /// @param data Calldata to pass to the call.\\n    /// @return The result of the call.\\n    function execute(\\n        MessageContext calldata messageContext,\\n        address destination,\\n        bytes calldata data\\n    )\\n        external\\n        payable\\n        nonReentrant\\n        onlyRole(TSS_ROLE)\\n        whenNotPaused\\n        returns (bytes memory)\\n    {\\n        if (destination == address(0)) revert ZeroAddress();\\n        bytes memory result;\\n        // Execute the call on the target contract\\n        // if sender is provided in messageContext call is authenticated and target is Callable.onCall\\n        // otherwise, call is arbitrary\\n        if (messageContext.sender == address(0)) {\\n            result = _executeArbitraryCall(destination, data);\\n        } else {\\n            result = _executeAuthenticatedCall(messageContext, destination, data);\\n        }\\n\\n        emit Executed(destination, msg.value, data);\\n\\n        return result;\\n    }\\n\\n    /// @notice Executes a call to a destination contract using ERC20 tokens.\\n    /// @dev This function can only be called by the custody or connector address.\\n    ///      It uses the ERC20 allowance system, resetting gateway allowance at the end.\\n    /// @param messageContext Message context containing sender.\\n    /// @param token Address of the ERC20 token.\\n    /// @param to Address of the contract to call.\\n    /// @param amount Amount of tokens to transfer.\\n    /// @param data Calldata to pass to the call.\\n    function executeWithERC20(\\n        MessageContext calldata messageContext,\\n        address token,\\n        address to,\\n        uint256 amount,\\n        bytes calldata data\\n    )\\n        public\\n        nonReentrant\\n        onlyRole(ASSET_HANDLER_ROLE)\\n        whenNotPaused\\n    {\\n        if (amount == 0) revert InsufficientERC20Amount();\\n        if (to == address(0)) revert ZeroAddress();\\n        // Approve the target contract to spend the tokens\\n        if (!_resetApproval(token, to)) revert ApprovalFailed();\\n        if (!IERC20(token).approve(to, amount)) revert ApprovalFailed();\\n        // Execute the call on the target contract\\n        // if sender is provided in messageContext call is authenticated and target is Callable.onCall\\n        // otherwise, call is arbitrary\\n        if (messageContext.sender == address(0)) {\\n            _executeArbitraryCall(to, data);\\n        } else {\\n            _executeAuthenticatedCall(messageContext, to, data);\\n        }\\n\\n        // Reset approval\\n        if (!_resetApproval(token, to)) revert ApprovalFailed();\\n\\n        // Transfer any remaining tokens back to the custody/connector contract\\n        uint256 remainingBalance = IERC20(token).balanceOf(address(this));\\n        if (remainingBalance > 0) {\\n            _transferToAssetHandler(token, remainingBalance);\\n        }\\n\\n        emit ExecutedWithERC20(token, to, amount, data);\\n    }\\n\\n    /// @notice Directly transfers ERC20 tokens and calls onRevert.\\n    /// @dev This function can only be called by the custody or connector address.\\n    /// @param token Address of the ERC20 token.\\n    /// @param to Address of the contract to call.\\n    /// @param amount Amount of tokens to transfer.\\n    /// @param data Calldata to pass to the call.\\n    /// @param revertContext Revert context to pass to onRevert.\\n    function revertWithERC20(\\n        address token,\\n        address to,\\n        uint256 amount,\\n        bytes calldata data,\\n        RevertContext calldata revertContext\\n    )\\n        external\\n        nonReentrant\\n        onlyRole(ASSET_HANDLER_ROLE)\\n        whenNotPaused\\n    {\\n        if (amount == 0) revert InsufficientERC20Amount();\\n        if (to == address(0)) revert ZeroAddress();\\n\\n        IERC20(token).safeTransfer(address(to), amount);\\n        Revertable(to).onRevert(revertContext);\\n\\n        emit Reverted(to, token, amount, data, revertContext);\\n    }\\n\\n    /// @notice Deposits ETH to the TSS address.\\n    /// @param receiver Address of the receiver.\\n    /// @param revertOptions Revert options.\\n    function deposit(address receiver, RevertOptions calldata revertOptions) external payable whenNotPaused {\\n        if (msg.value == 0) revert InsufficientETHAmount();\\n        if (receiver == address(0)) revert ZeroAddress();\\n        if (revertOptions.revertMessage.length > MAX_PAYLOAD_SIZE) revert PayloadSizeExceeded();\\n\\n        (bool deposited,) = tssAddress.call{ value: msg.value }(\\\"\\\");\\n\\n        if (!deposited) revert DepositFailed();\\n\\n        emit Deposited(msg.sender, receiver, msg.value, address(0), \\\"\\\", revertOptions);\\n    }\\n\\n    /// @notice Deposits ERC20 tokens to the custody or connector contract.\\n    /// @param receiver Address of the receiver.\\n    /// @param amount Amount of tokens to deposit.\\n    /// @param asset Address of the ERC20 token.\\n    /// @param revertOptions Revert options.\\n    function deposit(\\n        address receiver,\\n        uint256 amount,\\n        address asset,\\n        RevertOptions calldata revertOptions\\n    )\\n        external\\n        whenNotPaused\\n    {\\n        if (amount == 0) revert InsufficientERC20Amount();\\n        if (receiver == address(0)) revert ZeroAddress();\\n        if (revertOptions.revertMessage.length > MAX_PAYLOAD_SIZE) revert PayloadSizeExceeded();\\n\\n        _transferFromToAssetHandler(msg.sender, asset, amount);\\n\\n        emit Deposited(msg.sender, receiver, amount, asset, \\\"\\\", revertOptions);\\n    }\\n\\n    /// @notice Deposits ETH to the TSS address and calls an omnichain smart contract.\\n    /// @param receiver Address of the receiver.\\n    /// @param payload Calldata to pass to the call.\\n    /// @param revertOptions Revert options.\\n    function depositAndCall(\\n        address receiver,\\n        bytes calldata payload,\\n        RevertOptions calldata revertOptions\\n    )\\n        external\\n        payable\\n        whenNotPaused\\n    {\\n        if (msg.value == 0) revert InsufficientETHAmount();\\n        if (receiver == address(0)) revert ZeroAddress();\\n        if (payload.length + revertOptions.revertMessage.length > MAX_PAYLOAD_SIZE) revert PayloadSizeExceeded();\\n\\n        (bool deposited,) = tssAddress.call{ value: msg.value }(\\\"\\\");\\n\\n        if (!deposited) revert DepositFailed();\\n\\n        emit DepositedAndCalled(msg.sender, receiver, msg.value, address(0), payload, revertOptions);\\n    }\\n\\n    /// @notice Deposits ERC20 tokens to the custody or connector contract and calls an omnichain smart contract.\\n    /// @param receiver Address of the receiver.\\n    /// @param amount Amount of tokens to deposit.\\n    /// @param asset Address of the ERC20 token.\\n    /// @param payload Calldata to pass to the call.\\n    /// @param revertOptions Revert options.\\n    function depositAndCall(\\n        address receiver,\\n        uint256 amount,\\n        address asset,\\n        bytes calldata payload,\\n        RevertOptions calldata revertOptions\\n    )\\n        external\\n        whenNotPaused\\n    {\\n        if (amount == 0) revert InsufficientERC20Amount();\\n        if (receiver == address(0)) revert ZeroAddress();\\n        if (payload.length + revertOptions.revertMessage.length > MAX_PAYLOAD_SIZE) revert PayloadSizeExceeded();\\n\\n        _transferFromToAssetHandler(msg.sender, asset, amount);\\n\\n        emit DepositedAndCalled(msg.sender, receiver, amount, asset, payload, revertOptions);\\n    }\\n\\n    /// @notice Calls an omnichain smart contract without asset transfer.\\n    /// @param receiver Address of the receiver.\\n    /// @param payload Calldata to pass to the call.\\n    /// @param revertOptions Revert options.\\n    function call(\\n        address receiver,\\n        bytes calldata payload,\\n        RevertOptions calldata revertOptions\\n    )\\n        external\\n        whenNotPaused\\n    {\\n        if (revertOptions.callOnRevert) revert CallOnRevertNotSupported();\\n        if (receiver == address(0)) revert ZeroAddress();\\n        if (payload.length + revertOptions.revertMessage.length > MAX_PAYLOAD_SIZE) revert PayloadSizeExceeded();\\n\\n        emit Called(msg.sender, receiver, payload, revertOptions);\\n    }\\n\\n    /// @notice Sets the custody contract address.\\n    /// @param custody_ Address of the custody contract.\\n    function setCustody(address custody_) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (custody_ == address(0)) revert ZeroAddress();\\n        if (custody != address(0)) revert CustodyInitialized();\\n\\n        _grantRole(ASSET_HANDLER_ROLE, custody_);\\n        custody = custody_;\\n    }\\n\\n    /// @notice Sets the connector contract address.\\n    /// @param zetaConnector_ Address of the connector contract.\\n    function setConnector(address zetaConnector_) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (zetaConnector_ == address(0)) revert ZeroAddress();\\n        if (zetaConnector != address(0)) revert ConnectorInitialized();\\n\\n        _grantRole(ASSET_HANDLER_ROLE, zetaConnector_);\\n        zetaConnector = zetaConnector_;\\n    }\\n\\n    /// @dev Resets the approval of a token for a specified address.\\n    /// This is used to ensure that the approval is set to zero before setting it to a new value.\\n    /// @param token Address of the ERC20 token.\\n    /// @param to Address to reset the approval for.\\n    /// @return True if the approval reset was successful, false otherwise.\\n    function _resetApproval(address token, address to) private returns (bool) {\\n        return IERC20(token).approve(to, 0);\\n    }\\n\\n    /// @dev Transfers tokens from the sender to the asset handler.\\n    /// This function handles the transfer of tokens to either the connector or custody contract based on the asset\\n    /// type.\\n    /// @param from Address of the sender.\\n    /// @param token Address of the ERC20 token.\\n    /// @param amount Amount of tokens to transfer.\\n    function _transferFromToAssetHandler(address from, address token, uint256 amount) private {\\n        if (token == zetaToken) {\\n            // TODO: remove error and comment out code once ZETA supported back\\n            // https://github.com/zeta-chain/protocol-contracts/issues/394\\n            // ZETA token is currently not supported for deposit\\n            revert ZETANotSupported();\\n\\n            // // transfer to connector\\n            // // transfer amount to gateway\\n            // IERC20(token).safeTransferFrom(from, address(this), amount);\\n            // // approve connector to handle tokens depending on connector version (eg. lock or burn)\\n            // if (!IERC20(token).approve(zetaConnector, amount)) revert ApprovalFailed();\\n            // // send tokens to connector\\n            // ZetaConnectorBase(zetaConnector).receiveTokens(amount);\\n        } else {\\n            // transfer to custody\\n            if (!IERC20Custody(custody).whitelisted(token)) revert NotWhitelistedInCustody();\\n            IERC20(token).safeTransferFrom(from, custody, amount);\\n        }\\n    }\\n\\n    /// @dev Transfers tokens to the asset handler.\\n    /// This function handles the transfer of tokens to either the connector or custody contract based on the asset\\n    /// type.\\n    /// @param token Address of the ERC20 token.\\n    /// @param amount Amount of tokens to transfer.\\n    function _transferToAssetHandler(address token, uint256 amount) private {\\n        if (token == zetaToken) {\\n            // transfer to connector\\n            // approve connector to handle tokens depending on connector version (eg. lock or burn)\\n            if (!IERC20(token).approve(zetaConnector, amount)) revert ApprovalFailed();\\n            // send tokens to connector\\n            ZetaConnectorBase(zetaConnector).receiveTokens(amount);\\n        } else {\\n            // transfer to custody\\n            if (!IERC20Custody(custody).whitelisted(token)) revert NotWhitelistedInCustody();\\n            IERC20(token).safeTransfer(custody, amount);\\n        }\\n    }\\n\\n    /// @dev Private function to execute an arbitrary call to a destination address.\\n    /// @param destination Address to call.\\n    /// @param data Calldata to pass to the call.\\n    /// @return The result of the call.\\n    function _executeArbitraryCall(address destination, bytes calldata data) private returns (bytes memory) {\\n        _revertIfOnCallOrOnRevert(data);\\n        (bool success, bytes memory result) = destination.call{ value: msg.value }(data);\\n        if (!success) revert ExecutionFailed();\\n\\n        return result;\\n    }\\n\\n    /// @dev Private function to execute an authenticated call to a destination address.\\n    /// @param messageContext Message context containing sender and arbitrary call flag.\\n    /// @param destination Address to call.\\n    /// @param data Calldata to pass to the call.\\n    /// @return The result of the call.\\n    function _executeAuthenticatedCall(\\n        MessageContext calldata messageContext,\\n        address destination,\\n        bytes calldata data\\n    )\\n        private\\n        returns (bytes memory)\\n    {\\n        return Callable(destination).onCall{ value: msg.value }(messageContext, data);\\n    }\\n\\n    // @dev prevent spoofing onCall and onRevert functions\\n    function _revertIfOnCallOrOnRevert(bytes calldata data) private pure {\\n        if (data.length >= 4) {\\n            bytes4 functionSelector;\\n            assembly {\\n                functionSelector := calldataload(data.offset)\\n            }\\n\\n            if (functionSelector == Callable.onCall.selector) {\\n                revert NotAllowedToCallOnCall();\\n            }\\n\\n            if (functionSelector == Revertable.onRevert.selector) {\\n                revert NotAllowedToCallOnRevert();\\n            }\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"0.8.26\"}}}","address":"0x99F23Aa8Faf587f4552A85DeE95B09f71879A7da","bytecode":"0x60a060405234801561001057600080fd5b506040516109e33803806109e383398101604081905261002f916100ef565b338061005557604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61005e81610087565b506001600160a01b03918216608052600180546001600160a01b03191691909216179055610129565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146100ec57600080fd5b50565b6000806040838503121561010257600080fd5b825161010d816100d7565b602084015190925061011e816100d7565b809150509250929050565b60805161088461015f60003960008181608c015281816101e10152818161026f01528181610361015261045201526108846000f3fe6080604052600436106100785760003560e01c8063715018a61161004b578063715018a6146101375780638da5cb5b1461014c578063c9028a361461016a578063f2fde38b1461018a57005b8063116191b61461007a5780631cca0d78146100cb57806357333b86146100eb578063676cc0541461010b575b005b34801561008657600080fd5b506100ae7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100d757600080fd5b506100786100e636600461055a565b6101aa565b3480156100f757600080fd5b506001546100ae906001600160a01b031681565b61011e61011936600461057c565b6101d4565b6040516001600160e01b031990911681526020016100c2565b34801561014357600080fd5b50610078610250565b34801561015857600080fd5b506000546001600160a01b03166100ae565b34801561017657600080fd5b50610078610185366004610609565b610264565b34801561019657600080fd5b506100786101a536600461055a565b6102e6565b6101b2610329565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461021e576040516282b42960e81b815260040160405180910390fd5b600061022d8360048187610644565b81019061023a919061066e565b905061024581610356565b506000949350505050565b610258610329565b61026260006104ee565b565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102ac576040516282b42960e81b815260040160405180910390fd5b7fa7a2dd1f61a16e9be16558337ccaf27e4bb90761ccfab75065f0003f25a14037816040516102db91906106b0565b60405180910390a150565b6102ee610329565b6001600160a01b03811661031d57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b610326816104ee565b50565b6000546001600160a01b031633146102625760405163118cdaa760e01b8152336004820152602401610314565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461039e576040516282b42960e81b815260040160405180910390fd5b60405181907e28075d150cbd12889f4ca05003d16cc6b9142eca191c3241d8c9bcf7b94bb290600090a26040805160a08101825260008082526020808301829052828401829052835190810184528181526060830152620493e0608083015291516024810184905290919060440160408051601f198184030181529181526020820180516001600160e01b031663d986696360e01b17905260015490516306fb33ad60e21b81529192506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692631becceb49261048c921690859087906004016107c6565b600060405180830381600087803b1580156104a657600080fd5b505af11580156104ba573d6000803e3d6000fd5b50506040518592507f0e6864ae272575ae2e1733d7b69809f0c45315b2933b11d22ae4add611145b2e9150600090a2505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461055557600080fd5b919050565b60006020828403121561056c57600080fd5b6105758261053e565b9392505050565b6000806000838503604081121561059257600080fd5b60208112156105a057600080fd5b50839250602084013567ffffffffffffffff8111156105be57600080fd5b8401601f810186136105cf57600080fd5b803567ffffffffffffffff8111156105e657600080fd5b8660208284010111156105f857600080fd5b939660209190910195509293505050565b60006020828403121561061b57600080fd5b813567ffffffffffffffff81111561063257600080fd5b82016080818503121561057557600080fd5b6000808585111561065457600080fd5b8386111561066157600080fd5b5050820193919092039150565b60006020828403121561068057600080fd5b5035919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6040808252601590820152742932bb32b93a10333937b6902d32ba30a1b430b4b760591b6060820152608060208201526001600160a01b036106f18361053e565b1660808201526001600160a01b0361070b6020840161053e565b1660a0820152604082013560c08201526000606083013536849003601e1901811261073557600080fd5b830160208101903567ffffffffffffffff81111561075257600080fd5b80360382131561076157600080fd5b608060e085015261077761010085018284610687565b95945050505050565b6000815180845260005b818110156107a65760208185018101518683018201520161078a565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b03841681526060602082018190526000906107ea90830185610780565b828103604084015260018060a01b03845116815260208401511515602082015260018060a01b036040850151166040820152606084015160a0606083015261083560a0830182610780565b905060808501516080830152809250505094935050505056fea2646970667358221220503d6f06282c298d832ece039cef420036e2634753f8bcf0bf452c88b047e5f464736f6c634300081a0033","deployedBytecode":"0x6080604052600436106100785760003560e01c8063715018a61161004b578063715018a6146101375780638da5cb5b1461014c578063c9028a361461016a578063f2fde38b1461018a57005b8063116191b61461007a5780631cca0d78146100cb57806357333b86146100eb578063676cc0541461010b575b005b34801561008657600080fd5b506100ae7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100d757600080fd5b506100786100e636600461055a565b6101aa565b3480156100f757600080fd5b506001546100ae906001600160a01b031681565b61011e61011936600461057c565b6101d4565b6040516001600160e01b031990911681526020016100c2565b34801561014357600080fd5b50610078610250565b34801561015857600080fd5b506000546001600160a01b03166100ae565b34801561017657600080fd5b50610078610185366004610609565b610264565b34801561019657600080fd5b506100786101a536600461055a565b6102e6565b6101b2610329565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461021e576040516282b42960e81b815260040160405180910390fd5b600061022d8360048187610644565b81019061023a919061066e565b905061024581610356565b506000949350505050565b610258610329565b61026260006104ee565b565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102ac576040516282b42960e81b815260040160405180910390fd5b7fa7a2dd1f61a16e9be16558337ccaf27e4bb90761ccfab75065f0003f25a14037816040516102db91906106b0565b60405180910390a150565b6102ee610329565b6001600160a01b03811661031d57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b610326816104ee565b50565b6000546001600160a01b031633146102625760405163118cdaa760e01b8152336004820152602401610314565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461039e576040516282b42960e81b815260040160405180910390fd5b60405181907e28075d150cbd12889f4ca05003d16cc6b9142eca191c3241d8c9bcf7b94bb290600090a26040805160a08101825260008082526020808301829052828401829052835190810184528181526060830152620493e0608083015291516024810184905290919060440160408051601f198184030181529181526020820180516001600160e01b031663d986696360e01b17905260015490516306fb33ad60e21b81529192506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692631becceb49261048c921690859087906004016107c6565b600060405180830381600087803b1580156104a657600080fd5b505af11580156104ba573d6000803e3d6000fd5b50506040518592507f0e6864ae272575ae2e1733d7b69809f0c45315b2933b11d22ae4add611145b2e9150600090a2505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461055557600080fd5b919050565b60006020828403121561056c57600080fd5b6105758261053e565b9392505050565b6000806000838503604081121561059257600080fd5b60208112156105a057600080fd5b50839250602084013567ffffffffffffffff8111156105be57600080fd5b8401601f810186136105cf57600080fd5b803567ffffffffffffffff8111156105e657600080fd5b8660208284010111156105f857600080fd5b939660209190910195509293505050565b60006020828403121561061b57600080fd5b813567ffffffffffffffff81111561063257600080fd5b82016080818503121561057557600080fd5b6000808585111561065457600080fd5b8386111561066157600080fd5b5050820193919092039150565b60006020828403121561068057600080fd5b5035919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6040808252601590820152742932bb32b93a10333937b6902d32ba30a1b430b4b760591b6060820152608060208201526001600160a01b036106f18361053e565b1660808201526001600160a01b0361070b6020840161053e565b1660a0820152604082013560c08201526000606083013536849003601e1901811261073557600080fd5b830160208101903567ffffffffffffffff81111561075257600080fd5b80360382131561076157600080fd5b608060e085015261077761010085018284610687565b95945050505050565b6000815180845260005b818110156107a65760208185018101518683018201520161078a565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b03841681526060602082018190526000906107ea90830185610780565b828103604084015260018060a01b03845116815260208401511515602082015260018060a01b036040850151166040820152606084015160a0606083015261083560a0830182610780565b905060808501516080830152809250505094935050505056fea2646970667358221220503d6f06282c298d832ece039cef420036e2634753f8bcf0bf452c88b047e5f464736f6c634300081a0033","abi":[{"inputs":[{"internalType":"address payable","name":"gatewayAddress","type":"address"},{"internalType":"address","name":"_universalContract","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"inputs":[],"name":"Unauthorized","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"orderId","type":"uint256"}],"name":"CallbackReceived","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"orderId","type":"uint256"}],"name":"CallbackSent","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"","type":"string"},{"indexed":false,"internalType":"string","name":"","type":"string"}],"name":"HelloEvent","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"","type":"string"},{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"asset","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"revertMessage","type":"bytes"}],"indexed":false,"internalType":"struct RevertContext","name":"","type":"tuple"}],"name":"RevertEvent","type":"event"},{"stateMutability":"payable","type":"fallback"},{"inputs":[],"name":"gateway","outputs":[{"internalType":"contract GatewayEVM","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"}],"internalType":"struct MessageContext","name":"context","type":"tuple"},{"internalType":"bytes","name":"message","type":"bytes"}],"name":"onCall","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"asset","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"revertMessage","type":"bytes"}],"internalType":"struct RevertContext","name":"revertContext","type":"tuple"}],"name":"onRevert","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_universalContract","type":"address"}],"name":"setUniversalContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"universalContract","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}]}