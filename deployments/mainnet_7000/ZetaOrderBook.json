{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.26\"},\"sources\":{\"contracts/ZetaOrderBook.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.26;\\n\\nimport {RevertContext, RevertOptions, AbortContext} from \\\"@zetachain/protocol-contracts/contracts/Revert.sol\\\";\\nimport \\\"@zetachain/protocol-contracts/contracts/zevm/interfaces/UniversalContract.sol\\\";\\nimport \\\"@zetachain/protocol-contracts/contracts/zevm/interfaces/IGatewayZEVM.sol\\\";\\nimport \\\"@zetachain/protocol-contracts/contracts/zevm/GatewayZEVM.sol\\\";\\nimport \\\"@zetachain/protocol-contracts/contracts/zevm/interfaces/IZRC20.sol\\\";\\nimport \\\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\\\";\\nimport \\\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// Replace IZetaSwap with these interfaces\\ninterface ISwapRouter {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 limitSqrtPrice;\\n    }\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    function exactInputSingle(ExactInputSingleParams calldata params) external returns (uint256 amountOut);\\n    function exactInput(ExactInputParams calldata params) external returns (uint256 amountOut);\\n}\\n\\ninterface INativeSwapRouter {\\n    function wrapExactInputSingle(ISwapRouter.ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n    function unwrapExactInputSingle(ISwapRouter.ExactInputSingleParams calldata params) external returns (uint256 amountOut);\\n}\\n\\ncontract ZetaOrderBook is UniversalContract {\\n    using SafeERC20 for IERC20;\\n    \\n    GatewayZEVM public immutable gateway;\\n    IPyth public immutable pythOracle;\\n    INativeSwapRouter public swapRouter;\\n\\n    // USDC token address\\n    address public usdcToken;\\n    // Pyth price feed IDs\\n    bytes32 public zetaPriceId;\\n    // External chain connector for the price check loop\\n    address public callbackChain;\\n    bytes public callbackAddress;\\n\\n    // Contract balances\\n    uint256 public contractZetaBalance;\\n    uint256 public contractUsdcBalance;\\n\\n    // Connected gas token address\\n    address public immutable connectedGasZRC20;\\n\\n    // Contract owner\\n    address public owner;\\n\\n    enum OrderType { BUY, SELL }\\n\\n    struct Order {\\n        uint256 id;\\n        address owner;\\n        uint256 amount;   // Amount of ZETA for sell orders or USDC for buy orders\\n        uint256 priceLow; // Target price low in USDC with 6 decimals\\n        uint256 priceHigh; // Target price high in USDC with 6 decimals\\n        uint256 slippage; // Slippage tolerance in basis points (1% = 100)\\n        OrderType orderType;\\n        bool active;\\n    }\\n\\n    // Order storage\\n    mapping(uint256 => Order) public orders;\\n    uint256 public nextOrderId = 1;\\n\\n    // User balances\\n    mapping(address => uint256) public userUsdcBalance;\\n    mapping(address => uint256) public userZetaBalance;\\n    mapping(address => uint256) public userUsdcBalanceLocked;\\n    mapping(address => uint256) public userZetaBalanceLocked;\\n\\n    // Events\\n    event OrderCreated(uint256 indexed orderId, address indexed owner, OrderType orderType, uint256 amount, uint256 priceLow, uint256 priceHigh);\\n    event OrderExecuted(uint256 indexed orderId, uint256 executionPrice, OrderType orderType);\\n    event OrderCancelled(uint256 indexed orderId);\\n    event PriceChecked(uint256 indexed orderId, uint256 currentPrice, uint256 targetPriceLow, uint256 targetPriceHigh, bool conditionsMet);\\n    event SwapCompleted(address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut);\\n    event UsdcDeposited(address indexed user, uint256 amount);\\n    event ZetaDeposited(address indexed user, uint256 amount);\\n    event UsdcWithdrawn(address indexed user, uint256 amount);\\n    event ZetaWithdrawn(address indexed user, uint256 amount);\\n    event HelloEvent(string, string);\\n    event RevertEvent(string, RevertContext);\\n    event AbortEvent(string, AbortContext);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    error TransferFailed();\\n    error Unauthorized();\\n    error InvalidOrder();\\n    error SwapFailed();\\n    error PriceCheckFailed();\\n    error OrderNotActive();\\n    error InsufficientFunds();\\n    error SlippageExceeded(uint256 expectedAmount, uint256 receivedAmount, uint256 slippageBps);\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) revert Unauthorized();\\n        _;\\n    }\\n\\n    modifier onlyGateway() {\\n        if (msg.sender != address(gateway)) revert Unauthorized();\\n        _;\\n    }\\n\\n    modifier orderExists(uint256 orderId) {\\n        if (orderId >= nextOrderId || !orders[orderId].active) revert InvalidOrder();\\n        _;\\n    }\\n\\n    constructor(\\n        address payable gatewayAddress,\\n        address pythOracleAddress,\\n        address swapRouterAddress,\\n        address _usdcToken,\\n        bytes32 _zetaPriceId,\\n        address _callbackChain,\\n        bytes memory _callbackAddress,\\n        address _connectedGasZRC20,\\n        address _owner\\n    ) {\\n        gateway = GatewayZEVM(gatewayAddress);\\n        pythOracle = IPyth(pythOracleAddress);\\n        swapRouter = INativeSwapRouter(swapRouterAddress);\\n        usdcToken = _usdcToken;\\n        zetaPriceId = _zetaPriceId;\\n        callbackChain = _callbackChain;\\n        callbackAddress = _callbackAddress;\\n        connectedGasZRC20 = _connectedGasZRC20;\\n        owner = _owner;\\n        \\n        // Approve gateway to spend ETH.BASE for gas fees for loop function\\n        IZRC20(_connectedGasZRC20).approve(\\n            address(gateway),\\n            type(uint256).max\\n        );\\n    }\\n\\n    // Transfer ownership to a new address\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        if (newOwner == address(0)) revert Unauthorized();\\n        \\n        address oldOwner = owner;\\n        owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    // Get latest ZETA price from Pyth\\n    function getZetaPrice() public view returns (uint256, uint256) {\\n        PythStructs.Price memory price = pythOracle.getPriceUnsafe(zetaPriceId); // TODO: Only keep this for the demo\\n        // PythStructs.Price memory price = pythOracle.getPriceNoOlderThan(zetaPriceId, 120); // 2 minutes or less.\\n        return (uint256(uint64(price.price)), price.publishTime);\\n    }\\n\\n    // Deposit USDC to the contract\\n    function depositUsdc(uint256 amount) external {\\n        if (!IZRC20(usdcToken).transferFrom(msg.sender, address(this), amount)) {\\n            revert TransferFailed();\\n        }\\n        userUsdcBalance[msg.sender] += amount;\\n        contractUsdcBalance += amount;\\n        emit UsdcDeposited(msg.sender, amount);\\n    }\\n\\n    // Deposit ZETA to the contract\\n    function depositZeta() external payable {\\n        if (msg.value == 0) revert InsufficientFunds();\\n        contractZetaBalance += msg.value;\\n        userZetaBalance[msg.sender] += msg.value;\\n        emit ZetaDeposited(msg.sender, msg.value);\\n    }\\n\\n    // Withdraw USDC from the contract\\n    function withdrawUsdc(uint256 amount) external {\\n        if (userUsdcBalance[msg.sender] < amount) revert InsufficientFunds();\\n        if (contractUsdcBalance < amount) revert InsufficientFunds();\\n        \\n        userUsdcBalance[msg.sender] -= amount;\\n        contractUsdcBalance -= amount;\\n        \\n        if (!IZRC20(usdcToken).transfer(msg.sender, amount)) {\\n            revert TransferFailed();\\n        }\\n        emit UsdcWithdrawn(msg.sender, amount);\\n    }\\n\\n    // Withdraw ZETA from the contract\\n    function withdrawZeta(uint256 amount) external {\\n        if (userZetaBalance[msg.sender] < amount) revert InsufficientFunds();\\n        if (contractZetaBalance < amount) revert InsufficientFunds();\\n        \\n        userZetaBalance[msg.sender] -= amount;\\n        contractZetaBalance -= amount;\\n        \\n        // Use a payable function to send ZETA\\n        (bool success, ) = payable(msg.sender).call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            // Revert the balance changes if transfer fails\\n            userZetaBalance[msg.sender] += amount;\\n            contractZetaBalance += amount;\\n            revert TransferFailed();\\n        }\\n        emit ZetaWithdrawn(msg.sender, amount);\\n    }\\n\\n    // Create a sell order for ZETA (native token) for a specific orderId\\n    function _createSellOrder(uint256 targetPriceLow, uint256 targetPriceHigh, uint256 slippageBps, uint256 orderId) internal {\\n        // get the owner of the order\\n        address orderOwner = orders[orderId].owner;\\n\\n        uint256 zetaAmount = userZetaBalance[orderOwner];\\n        if (zetaAmount == 0) revert InsufficientFunds();\\n        if (slippageBps > 1000) revert InvalidOrder(); // Max 10% slippage\\n\\n\\n        // Lock ZETA from user's balance\\n        userZetaBalance[orderOwner] -= zetaAmount;\\n        userZetaBalanceLocked[orderOwner] += zetaAmount;\\n\\n        orders[orderId] = Order({\\n            id: orderId,\\n            owner: orderOwner, // maintain the owner of the order\\n            amount: zetaAmount,\\n            priceLow: targetPriceLow,\\n            priceHigh: targetPriceHigh,\\n            slippage: slippageBps,\\n            orderType: OrderType.SELL,\\n            active: true\\n        });\\n\\n        emit OrderCreated(orderId, orderOwner, OrderType.SELL, zetaAmount, targetPriceLow, targetPriceHigh);\\n\\n        // Check if order can be executed immediately\\n        checkAndExecuteOrder(orderId);\\n    }\\n\\n    // Create a sell order for ZETA (native token)\\n    function createSellOrder(uint256 targetPriceLow, uint256 targetPriceHigh, uint256 slippageBps) external {\\n        // Create order\\n        uint256 orderId = nextOrderId++;\\n        // set the owner of the order\\n        orders[orderId].owner = msg.sender;\\n        _createSellOrder(targetPriceLow, targetPriceHigh, slippageBps, orderId);\\n    }\\n\\n    // Create a buy order with USDC\\n    function _createBuyOrder(uint256 zetaAmount, uint256 targetPriceLow, uint256 targetPriceHigh, uint256 slippageBps, uint256 orderId) internal {\\n        // get the owner of the order\\n        address orderOwner = orders[orderId].owner;\\n\\n        // Calculate the required USDC amount\\n        uint256 usdcAmount = (zetaAmount * targetPriceLow) / 1e6;\\n\\n        // Check if user has enough USDC balance\\n        if (userUsdcBalance[orderOwner] < usdcAmount) revert InsufficientFunds();\\n        if (slippageBps > 1000) revert InvalidOrder(); // Max 10% slippage\\n\\n        // Lock USDC from user's balance\\n        userUsdcBalance[orderOwner] -= usdcAmount;\\n        userUsdcBalanceLocked[orderOwner] += usdcAmount;\\n\\n        orders[orderId] = Order({\\n            id: orderId,\\n            owner: orderOwner, // maintain the owner of the order\\n            amount: zetaAmount,\\n            priceLow: targetPriceLow,\\n            priceHigh: targetPriceHigh,\\n            slippage: slippageBps,\\n            orderType: OrderType.BUY,\\n            active: true\\n        });\\n\\n        emit OrderCreated(orderId, orderOwner, OrderType.BUY, zetaAmount, targetPriceLow, targetPriceHigh);\\n\\n        // Check if order can be executed immediately\\n        checkAndExecuteOrder(orderId);\\n    }\\n\\n    // Create a buy order with USDC\\n    function createBuyOrder(uint256 zetaAmount, uint256 targetPriceLow, uint256 targetPriceHigh, uint256 slippageBps) external {\\n        // Calculate the required USDC amount\\n        uint256 usdcAmount = (zetaAmount * targetPriceLow) / 1e6;\\n\\n        // Check if user has enough USDC balance\\n        if (userUsdcBalance[msg.sender] < usdcAmount) revert InsufficientFunds();\\n        if (slippageBps > 1000) revert InvalidOrder(); // Max 10% slippage\\n\\n        // Create order\\n        uint256 orderId = nextOrderId++;\\n        \\n        // set the owner of the order\\n        orders[orderId].owner = msg.sender;\\n        _createBuyOrder(zetaAmount, targetPriceLow, targetPriceHigh, slippageBps, orderId);\\n    }\\n\\n    function setupFollowupOrder(uint256 orderId, OrderType orderType) internal {\\n        // If the followup orderType is SELL, use the internal _createSellOrder function\\n        if (orderType == OrderType.SELL) {\\n            // sell all ZETA at the target price.\\n            _createSellOrder(orders[orderId].priceLow, orders[orderId].priceHigh, orders[orderId].slippage, orderId);\\n        } else {\\n            // buy as much as possible with the USDC balance at the target price.\\n            uint256 zetaAmount = (userUsdcBalance[orders[orderId].owner] * orders[orderId].priceLow) / 1e6;\\n            _createBuyOrder(zetaAmount, orders[orderId].priceLow, orders[orderId].priceHigh, orders[orderId].slippage, orderId);\\n        }\\n        \\n        orders[orderId].orderType = orderType;\\n    }\\n\\n    // Cancel an order\\n    function cancelOrder(uint256 orderId) external orderExists(orderId) {\\n        Order storage order = orders[orderId];\\n\\n        // Only owner can cancel\\n        if (order.owner != msg.sender) revert Unauthorized();\\n\\n        // Mark as inactive\\n        order.active = false;\\n\\n        // Return funds to owner's balance\\n        if (order.orderType == OrderType.SELL) {\\n            // Return ZETA to user's balance\\n            userZetaBalance[order.owner] += order.amount;\\n            userZetaBalanceLocked[order.owner] -= order.amount;\\n        } else {\\n            // Return USDC to user's balance\\n            uint256 usdcAmount = (order.amount * order.priceLow) / 1e6; // TODO: Ensure there are no rounding errors\\n            userUsdcBalance[order.owner] += usdcAmount;\\n            userUsdcBalanceLocked[order.owner] -= usdcAmount;\\n        }\\n\\n        emit OrderCancelled(orderId);\\n    }\\n\\n    // Main function to check if an order can be executed\\n    function checkAndExecuteOrder(uint256 orderId) public orderExists(orderId) {\\n        Order storage order = orders[orderId];\\n\\n        // Get current ZETA price\\n        (uint256 currentPrice, ) = getZetaPrice();\\n        currentPrice = currentPrice * 100;  // Adjust Pyth price to match USDC decimals\\n\\n        bool conditionsMet = false;\\n\\n        // Check conditions based on order type\\n        if (order.orderType == OrderType.SELL) {\\n            // For sell orders, execute if current price >= target price\\n            conditionsMet = currentPrice >= order.priceHigh;\\n        } else {\\n            // For buy orders, execute if current price <= target price\\n            conditionsMet = currentPrice <= order.priceLow;\\n        }\\n\\n        emit PriceChecked(orderId, currentPrice, order.priceLow, order.priceHigh, conditionsMet); // TODO: Remove this because it will get noisy\\n\\n        if (conditionsMet) {\\n            // Execute the order\\n            executeOrder(orderId, currentPrice);\\n        } else {\\n            // Start the cross-chain loop for continuous price checking\\n            triggerPriceCheckLoop(orderId);\\n        }\\n    }\\n\\n    // Execute an order\\n    function executeOrder(uint256 orderId, uint256 executionPrice) internal {\\n        Order storage order = orders[orderId];\\n        // TODO: Determine if we should test if the order is still active here or is that checked elsewhere? Is it possible for this to be reached with an inactive order?\\n        // handled in the onCall function?\\n\\n        if (order.orderType == OrderType.SELL) {\\n            // SELL Order: Swap native ZETA for USDC\\n            // Calculate minimum USDC output based on order price and slippage\\n            uint256 minUsdcOutput = (order.amount * order.priceHigh * (10000 - order.slippage)) / (1e6 * 10000);\\n\\n            // Create params for wrapExactInputSingle\\n            ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\n                tokenIn: address(0x5F0b1a82749cb4E2278EC87F8BF6B618dC71a8bf), // WZETA\\n                tokenOut: usdcToken,\\n                recipient: address(this),\\n                deadline: block.timestamp + 15 minutes,\\n                amountIn: order.amount,\\n                amountOutMinimum: minUsdcOutput,\\n                limitSqrtPrice: 0\\n            });\\n\\n            try swapRouter.wrapExactInputSingle{value: order.amount}(params) returns (uint256 amountOut) {\\n                if (amountOut < minUsdcOutput) {\\n                    triggerPriceCheckLoop(orderId);\\n                    return;  // Exit without reverting\\n                }\\n                userUsdcBalance[order.owner] += amountOut; // increase available balance with the profit only\\n                userZetaBalanceLocked[order.owner] -= order.amount; // decrease locked balance with the amount of ZETA swapped.\\n                contractUsdcBalance += amountOut; // increase contract USDC holdings\\n                contractZetaBalance -= order.amount; // decrease contract ZETA holdings\\n\\n                emit SwapCompleted(address(0), usdcToken, order.amount, amountOut);\\n                emit OrderExecuted(orderId, executionPrice, OrderType.SELL);\\n\\n                // Flip order to BUY and increase userUsdcBalanceLocked (since the order is active)\\n                setupFollowupOrder(orderId, OrderType.BUY);\\n                triggerPriceCheckLoop(orderId);\\n            } catch {\\n                // If swap fails, try again after another loop\\n                triggerPriceCheckLoop(orderId);\\n                return;  // Exit without reverting\\n            }\\n        } else {\\n            // BUY Order: Swap USDC for native ZETA\\n            // Calculate USDC amount to use\\n            uint256 usdcAmount = (order.amount * order.priceLow) / 1e6; // TODO: Ensure there are no rounding errors\\n            \\n            // Calculate minimum ZETA output based on slippage\\n            uint256 minZetaOutput = (order.amount * (10000 - order.slippage)) / 10000;\\n\\n            // Approve router\\n            IERC20(usdcToken).approve(address(swapRouter), usdcAmount);\\n\\n            // Create params for unwrapExactInputSingle\\n            ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\n                tokenIn: usdcToken,\\n                tokenOut: address(0x5F0b1a82749cb4E2278EC87F8BF6B618dC71a8bf), // WZETA\\n                recipient: address(this),\\n                deadline: block.timestamp + 15 minutes,\\n                amountIn: usdcAmount,\\n                amountOutMinimum: minZetaOutput,\\n                limitSqrtPrice: 0\\n            });\\n\\n            try swapRouter.unwrapExactInputSingle(params) returns (uint256 amountOut) {\\n                if (amountOut < minZetaOutput) {\\n                    IERC20(usdcToken).approve(address(swapRouter), 0);  // Reset approval\\n                    triggerPriceCheckLoop(orderId);\\n                    return;  // Exit without reverting\\n                }\\n                userZetaBalance[order.owner] += amountOut; // increase available balance\\n                userZetaBalanceLocked[order.owner] -= amountOut; // decrease locked balance with the amount of ZETA swapped.\\n                contractZetaBalance += amountOut; // increase contract ZETA holdings\\n                contractUsdcBalance -= usdcAmount; // decrease contract USDC holdings\\n\\n                IERC20(usdcToken).approve(address(swapRouter), 0);  // Reset approval\\n                emit SwapCompleted(usdcToken, address(0), usdcAmount, amountOut);\\n                emit OrderExecuted(orderId, executionPrice, OrderType.BUY);\\n                // Flip order to SELL and increase userZetaBalanceLocked (since the order is active)\\n                setupFollowupOrder(orderId, OrderType.SELL);\\n                triggerPriceCheckLoop(orderId);\\n            } catch {\\n                // If swap fails, try again after another loop\\n                IERC20(usdcToken).approve(address(swapRouter), 0);  // Reset approval\\n                triggerPriceCheckLoop(orderId);\\n                return;  // Exit without reverting\\n            }\\n        }\\n    }\\n\\n    // Start the cross-chain loop for price checking\\n    function triggerPriceCheckLoop(uint256 orderId) internal {\\n        // Create call options\\n        CallOptions memory callOptions = CallOptions({\\n            gasLimit: 200000,\\n            isArbitraryCall: false\\n        });\\n\\n        // Create revert options with updated struct format\\n        RevertOptions memory revertOptions = RevertOptions({\\n            revertAddress: address(0),\\n            callOnRevert: false,\\n            abortAddress: address(0),\\n            revertMessage: \\\"\\\",\\n            onRevertGasLimit: 200000\\n        });\\n\\n        // Query gas fee for the call\\n        (, uint256 gasFee) = IZRC20(connectedGasZRC20).withdrawGasFeeWithGasLimit(callOptions.gasLimit);\\n        \\n        // Ensure we have enough balance\\n        if (IZRC20(connectedGasZRC20).balanceOf(address(this)) < gasFee) {\\n            revert InsufficientFunds();\\n        }\\n\\n        // Approve gateway to spend gas fee\\n        // Already set up in the constructor for max gas. TODO: Undo that and uncomment this.\\n        // IZRC20(connectedGasZRC20).approve(address(gateway), gasFee);\\n\\n        bytes memory message = abi.encodeWithSignature(\\n            \\\"priceCheckCallback(uint256)\\\",\\n            orderId\\n        );\\n\\n        // Convert callbackAddress to bytes\\n        bytes memory receiver = abi.encodePacked(callbackAddress);\\n\\n        // Call the external contract to trigger the loop\\n        try gateway.call(\\n            receiver,\\n            connectedGasZRC20,\\n            message,\\n            callOptions,\\n            revertOptions\\n        ) {\\n            // Success, loop initiated\\n            emit HelloEvent(\\\"ZetaHopper:ZetaChain\\\", \\\"Outbound Callback\\\");\\n        } catch {\\n            revert PriceCheckFailed();\\n        }\\n    }\\n\\n    // Main entry point for cross-chain messages\\n    function onCall(\\n        MessageContext calldata context,\\n        address zrc20,\\n        uint256 amount,\\n        bytes calldata message\\n    ) external override onlyGateway {\\n        // Extract the function selector from the message\\n        bytes4 selector;\\n        if (message.length >= 4) {\\n            // Fixed: Use proper calldata access\\n            bytes4 tempSelector;\\n            assembly {\\n            // Load the first 4 bytes from calldata position message.offset\\n                tempSelector := calldataload(message.offset)\\n            }\\n            // Shift right by 28 bytes (224 bits) to get just the first 4 bytes\\n            selector = tempSelector >> 224;\\n        }\\n\\n        if (selector == bytes4(keccak256(\\\"priceCheckCallback(uint256)\\\"))) {\\n            // Price check callback from external chain\\n            // Skip the first 4 bytes (function selector) and decode the orderId\\n            uint256 orderId;\\n            assembly {\\n            // Load from calldata at position message.offset + 4 (skipping selector)\\n                orderId := calldataload(add(message.offset, 4))\\n            }\\n\\n            // Check if order still exists and is active\\n            if (orderId < nextOrderId && orders[orderId].active) {\\n                // Re-check order conditions\\n                checkAndExecuteOrder(orderId);\\n            }\\n        } else {\\n            // Simple string handling for the hello message\\n            emit HelloEvent(\\\"Hello on ZetaChain\\\", \\\"Received message\\\");\\n        }\\n    }\\n\\n    // Sweep connected gas token back to owner\\n    function sweepConnectedGas() external onlyOwner {\\n        uint256 balance = IZRC20(connectedGasZRC20).balanceOf(address(this));\\n        if (balance == 0) revert InsufficientFunds();\\n        \\n        if (!IZRC20(connectedGasZRC20).transfer(owner, balance)) {\\n            revert TransferFailed();\\n        }\\n    }\\n\\n    // For receiving native ZETA and connected gas token\\n    receive() external payable {\\n        // When receiving ZETA directly (not through depositZeta), add it to the contract's balance and sender's balance\\n        if (msg.value > 0) {\\n            contractZetaBalance += msg.value;\\n            userZetaBalance[msg.sender] += msg.value;\\n            emit ZetaDeposited(msg.sender, msg.value);\\n        }\\n    }\\n\\n    // Universal contract functions\\n    function call(\\n        bytes memory receiver,\\n        address zrc20,\\n        bytes calldata message,\\n        CallOptions memory callOptions,\\n        RevertOptions memory revertOptions\\n    ) external {\\n        (, uint256 gasFee) = IZRC20(zrc20).withdrawGasFeeWithGasLimit(\\n            callOptions.gasLimit\\n        );\\n        if (!IZRC20(zrc20).transferFrom(msg.sender, address(this), gasFee)) {\\n            revert TransferFailed();\\n        }\\n        IZRC20(zrc20).approve(address(gateway), gasFee);\\n        gateway.call(receiver, zrc20, message, callOptions, revertOptions);\\n    }\\n\\n    function onRevert(RevertContext calldata context) external onlyGateway {\\n        emit RevertEvent(\\\"Revert on ZetaChain\\\", context);\\n    }\\n\\n    function onAbort(AbortContext calldata context) external onlyGateway {\\n        emit AbortEvent(\\\"Abort on ZetaChain\\\", context);\\n    }\\n}\",\"versionPragma\":\"0.8.26\"},\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n\\n    /// @notice Similar to `parsePriceFeedUpdates` but ensures the updates returned are\\n    /// the first updates published in minPublishTime. That is, if there are multiple updates for a given timestamp,\\n    /// this method will return the first update. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range and uniqueness condition.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdatesUnique(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@zetachain/protocol-contracts/contracts/Revert.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\n/// @notice Struct containing revert options\\n/// @param revertAddress Address to receive revert.\\n/// @param callOnRevert Flag if onRevert hook should be called.\\n/// @param abortAddress Address to receive funds if aborted.\\n/// @param revertMessage Arbitrary data sent back in onRevert.\\n/// @param onRevertGasLimit Gas limit for revert tx, unused on GatewayZEVM methods\\nstruct RevertOptions {\\n    address revertAddress;\\n    bool callOnRevert;\\n    address abortAddress;\\n    bytes revertMessage;\\n    uint256 onRevertGasLimit;\\n}\\n\\n/// @notice Struct containing revert context passed to onRevert.\\n/// @param sender Address of account that initiated smart contract call.\\n/// @param asset Address of asset. On a connected chain, it contains the fungible\\n/// token address or is empty if it's a gas token. On ZetaChain, it contains the\\n/// address of the ZRC20.\\n/// @param amount Amount specified with the transaction.\\n/// @param revertMessage Arbitrary data sent back in onRevert.\\nstruct RevertContext {\\n    address sender;\\n    address asset;\\n    uint256 amount;\\n    bytes revertMessage;\\n}\\n\\n/// @notice Struct containing abort context passed to onAbort.\\n/// @param sender Address of account that initiated smart contract call.\\n/// bytes is used as the crosschain transaction can be initiated from a non-EVM chain.\\n/// @param asset Address of asset. On a connected chain, it contains the fungible\\n/// token address or is empty if it's a gas token. On ZetaChain, it contains the\\n/// address of the ZRC20.\\n/// @param amount Amount specified with the transaction.\\n/// @param outgoing Flag to indicate if the crosschain transaction was outgoing: from ZetaChain to connected chain.\\n/// if false, the transaction was incoming: from connected chain to ZetaChain.\\n/// @param chainID Chain ID of the connected chain.\\n/// @param revertMessage Arbitrary data specified in the RevertOptions object when initating the crosschain transaction.\\nstruct AbortContext {\\n    bytes sender;\\n    address asset;\\n    uint256 amount;\\n    bool outgoing;\\n    uint256 chainID;\\n    bytes revertMessage;\\n}\\n\\n/// @title Revertable\\n/// @notice Interface for contracts that support revertable calls.\\ninterface Revertable {\\n    /// @notice Called when a revertable call is made.\\n    /// @param revertContext Revert context to pass to onRevert.\\n    function onRevert(RevertContext calldata revertContext) external;\\n}\\n\\n/// @title Abortable\\n/// @notice Interface for contracts that support abortable calls.\\ninterface Abortable {\\n    /// @notice Called when a revertable call is aborted.\\n    /// @param abortContext Abort context to pass to onAbort.\\n    function onAbort(AbortContext calldata abortContext) external;\\n}\\n\",\"versionPragma\":\"0.8.26\"},\"@zetachain/protocol-contracts/contracts/zevm/interfaces/UniversalContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nimport { RevertContext } from \\\"../../../contracts/Revert.sol\\\";\\n\\n/// @custom:deprecated should be removed once v2 SystemContract is not used anymore.\\n/// MessageContext should be used\\nstruct zContext {\\n    bytes origin;\\n    address sender;\\n    uint256 chainID;\\n}\\n\\n/// @custom:deprecated should be removed once v2 SystemContract is not used anymore.\\n/// UniversalContract should be used\\ninterface zContract {\\n    function onCrossChainCall(\\n        zContext calldata context,\\n        address zrc20,\\n        uint256 amount,\\n        bytes calldata message\\n    )\\n        external;\\n}\\n\\nstruct MessageContext {\\n    bytes origin;\\n    address sender;\\n    uint256 chainID;\\n}\\n\\ninterface UniversalContract {\\n    function onCall(MessageContext calldata context, address zrc20, uint256 amount, bytes calldata message) external;\\n}\\n\",\"versionPragma\":\"0.8.26\"},\"@zetachain/protocol-contracts/contracts/zevm/interfaces/IGatewayZEVM.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nimport \\\"../../../contracts/Revert.sol\\\";\\nimport \\\"./UniversalContract.sol\\\";\\n\\n/// @title IGatewayZEVMEvents\\n/// @notice Interface for the events emitted by the GatewayZEVM contract.\\ninterface IGatewayZEVMEvents {\\n    /// @notice Emitted when a cross-chain call is made.\\n    /// @param sender The address of the sender.\\n    /// @param zrc20 Address of zrc20 to pay fees.\\n    /// @param receiver The receiver address on the external chain.\\n    /// @param message The calldata passed to the contract call.\\n    /// @param callOptions Call options including gas limit and arbirtrary call flag.\\n    /// @param revertOptions Revert options.\\n    event Called(\\n        address indexed sender,\\n        address indexed zrc20,\\n        bytes receiver,\\n        bytes message,\\n        CallOptions callOptions,\\n        RevertOptions revertOptions\\n    );\\n\\n    /// @notice Emitted when a withdrawal is made.\\n    /// @param sender The address from which the tokens are withdrawn.\\n    /// @param chainId Chain id of external chain.\\n    /// @param receiver The receiver address on the external chain.\\n    /// @param zrc20 The address of the ZRC20 token.\\n    /// @param value The amount of tokens withdrawn.\\n    /// @param gasfee The gas fee for the withdrawal.\\n    /// @param protocolFlatFee The protocol flat fee for the withdrawal.\\n    /// @param message The calldata passed with the withdraw. No longer used. Kept to maintain compatibility.\\n    /// @param callOptions Call options including gas limit and arbirtrary call flag.\\n    /// @param revertOptions Revert options.\\n    event Withdrawn(\\n        address indexed sender,\\n        uint256 indexed chainId,\\n        bytes receiver,\\n        address zrc20,\\n        uint256 value,\\n        uint256 gasfee,\\n        uint256 protocolFlatFee,\\n        bytes message,\\n        CallOptions callOptions,\\n        RevertOptions revertOptions\\n    );\\n\\n    /// @notice Emitted when a withdraw and call is made.\\n    /// @param sender The address from which the tokens are withdrawn.\\n    /// @param chainId Chain id of external chain.\\n    /// @param receiver The receiver address on the external chain.\\n    /// @param zrc20 The address of the ZRC20 token.\\n    /// @param value The amount of tokens withdrawn.\\n    /// @param gasfee The gas fee for the withdrawal.\\n    /// @param protocolFlatFee The protocol flat fee for the withdrawal.\\n    /// @param message The calldata passed to the contract call.\\n    /// @param callOptions Call options including gas limit and arbirtrary call flag.\\n    /// @param revertOptions Revert options.\\n    event WithdrawnAndCalled(\\n        address indexed sender,\\n        uint256 indexed chainId,\\n        bytes receiver,\\n        address zrc20,\\n        uint256 value,\\n        uint256 gasfee,\\n        uint256 protocolFlatFee,\\n        bytes message,\\n        CallOptions callOptions,\\n        RevertOptions revertOptions\\n    );\\n}\\n\\n/// @title IGatewayZEVMErrors\\n/// @notice Interface for the errors used in the GatewayZEVM contract.\\ninterface IGatewayZEVMErrors {\\n    /// @notice Error indicating a withdrawal failure.\\n    error WithdrawalFailed();\\n\\n    /// @notice Error indicating an insufficient ZRC20 token amount.\\n    error InsufficientZRC20Amount();\\n\\n    /// @notice Error indicating an insufficient zeta amount.\\n    error InsufficientZetaAmount();\\n\\n    /// @notice Error indicating a failure to burn ZRC20 tokens.\\n    error ZRC20BurnFailed();\\n\\n    /// @notice Error indicating a failure to transfer ZRC20 tokens.\\n    error ZRC20TransferFailed();\\n\\n    /// @notice Error indicating a failure to deposit ZRC20 tokens.\\n    error ZRC20DepositFailed();\\n\\n    /// @notice Error indicating a failure to transfer gas fee.\\n    error GasFeeTransferFailed();\\n\\n    /// @notice Error indicating that the caller is not the protocol account.\\n    error CallerIsNotProtocol();\\n\\n    /// @notice Error indicating an invalid target address.\\n    error InvalidTarget();\\n\\n    /// @notice Error indicating a failure to send ZETA tokens.\\n    error FailedZetaSent();\\n\\n    /// @notice Error indicating that only WZETA or the protocol address can call the function.\\n    error OnlyWZETAOrProtocol();\\n\\n    /// @notice Error indicating an insufficient gas limit.\\n    error InsufficientGasLimit();\\n\\n    /// @notice Error indicating message size exceeded in external functions.\\n    error MessageSizeExceeded();\\n}\\n\\n/// @title IGatewayZEVM\\n/// @notice Interface for the GatewayZEVM contract.\\n/// @dev Defines functions for cross-chain interactions and token handling.\\ninterface IGatewayZEVM is IGatewayZEVMErrors, IGatewayZEVMEvents {\\n    /// @notice Withdraw ZRC20 tokens to an external chain.\\n    /// @param receiver The receiver address on the external chain.\\n    /// @param amount The amount of tokens to withdraw.\\n    /// @param zrc20 The address of the ZRC20 token.\\n    /// @param revertOptions Revert options.\\n    function withdraw(\\n        bytes memory receiver,\\n        uint256 amount,\\n        address zrc20,\\n        RevertOptions calldata revertOptions\\n    )\\n        external;\\n\\n    /// @notice Withdraw ZETA tokens to an external chain.\\n    /// @param receiver The receiver address on the external chain.\\n    /// @param amount The amount of tokens to withdraw.\\n    /// @param revertOptions Revert options.\\n    function withdraw(\\n        bytes memory receiver,\\n        uint256 amount,\\n        uint256 chainId,\\n        RevertOptions calldata revertOptions\\n    )\\n        external;\\n\\n    /// @notice Withdraw ZRC20 tokens and call a smart contract on an external chain.\\n    /// @param receiver The receiver address on the external chain.\\n    /// @param amount The amount of tokens to withdraw.\\n    /// @param zrc20 The address of the ZRC20 token.\\n    /// @param message The calldata to pass to the contract call.\\n    /// @param callOptions Call options including gas limit and arbirtrary call flag.\\n    /// @param revertOptions Revert options.\\n    function withdrawAndCall(\\n        bytes memory receiver,\\n        uint256 amount,\\n        address zrc20,\\n        bytes calldata message,\\n        CallOptions calldata callOptions,\\n        RevertOptions calldata revertOptions\\n    )\\n        external;\\n\\n    /// @notice Withdraw ZETA tokens and call a smart contract on an external chain.\\n    /// @param receiver The receiver address on the external chain.\\n    /// @param amount The amount of tokens to withdraw.\\n    /// @param chainId Chain id of the external chain.\\n    /// @param message The calldata to pass to the contract call.\\n    /// @param callOptions Call options including gas limit and arbirtrary call flag.\\n    /// @param revertOptions Revert options.\\n    function withdrawAndCall(\\n        bytes memory receiver,\\n        uint256 amount,\\n        uint256 chainId,\\n        bytes calldata message,\\n        CallOptions calldata callOptions,\\n        RevertOptions calldata revertOptions\\n    )\\n        external;\\n\\n    /// @notice Call a smart contract on an external chain without asset transfer.\\n    /// @param receiver The receiver address on the external chain.\\n    /// @param zrc20 Address of zrc20 to pay fees.\\n    /// @param message The calldata to pass to the contract call.\\n    /// @param callOptions Call options including gas limit and arbirtrary call flag.\\n    /// @param revertOptions Revert options.\\n    function call(\\n        bytes memory receiver,\\n        address zrc20,\\n        bytes calldata message,\\n        CallOptions calldata callOptions,\\n        RevertOptions calldata revertOptions\\n    )\\n        external;\\n\\n    /// @notice Deposit foreign coins into ZRC20.\\n    /// @param zrc20 The address of the ZRC20 token.\\n    /// @param amount The amount of tokens to deposit.\\n    /// @param target The target address to receive the deposited tokens.\\n    function deposit(address zrc20, uint256 amount, address target) external;\\n\\n    /// @notice Execute a user-specified contract on ZEVM.\\n    /// @param context The context of the cross-chain call.\\n    /// @param zrc20 The address of the ZRC20 token.\\n    /// @param amount The amount of tokens to transfer.\\n    /// @param target The target contract to call.\\n    /// @param message The calldata to pass to the contract call.\\n    function execute(\\n        MessageContext calldata context,\\n        address zrc20,\\n        uint256 amount,\\n        address target,\\n        bytes calldata message\\n    )\\n        external;\\n\\n    /// @notice Deposit foreign coins into ZRC20 and call a user-specified contract on ZEVM.\\n    /// @param context The context of the cross-chain call.\\n    /// @param zrc20 The address of the ZRC20 token.\\n    /// @param amount The amount of tokens to transfer.\\n    /// @param target The target contract to call.\\n    /// @param message The calldata to pass to the contract call.\\n    function depositAndCall(\\n        MessageContext calldata context,\\n        address zrc20,\\n        uint256 amount,\\n        address target,\\n        bytes calldata message\\n    )\\n        external;\\n\\n    /// @notice Deposit ZETA and call a user-specified contract on ZEVM.\\n    /// @param context The context of the cross-chain call.\\n    /// @param amount The amount of tokens to transfer.\\n    /// @param target The target contract to call.\\n    /// @param message The calldata to pass to the contract call.\\n    function depositAndCall(\\n        MessageContext calldata context,\\n        uint256 amount,\\n        address target,\\n        bytes calldata message\\n    )\\n        external;\\n\\n    /// @notice Revert a user-specified contract on ZEVM.\\n    /// @param target The target contract to call.\\n    /// @param revertContext Revert context to pass to onRevert.\\n    function executeRevert(address target, RevertContext calldata revertContext) external;\\n\\n    /// @notice Deposit foreign coins into ZRC20 and revert a user-specified contract on ZEVM.\\n    /// @param zrc20 The address of the ZRC20 token.\\n    /// @param amount The amount of tokens to revert.\\n    /// @param target The target contract to call.\\n    /// @param revertContext Revert context to pass to onRevert.\\n    function depositAndRevert(\\n        address zrc20,\\n        uint256 amount,\\n        address target,\\n        RevertContext calldata revertContext\\n    )\\n        external;\\n}\\n\\n/// @notice CallOptions struct passed to call and withdrawAndCall functions.\\n/// @param gasLimit Gas limit.\\n/// @param isArbitraryCall Indicates if call should be arbitrary or authenticated.\\nstruct CallOptions {\\n    uint256 gasLimit;\\n    bool isArbitraryCall;\\n}\\n\",\"versionPragma\":\"0.8.26\"},\"@zetachain/protocol-contracts/contracts/zevm/interfaces/IZRC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\n/// @title IZRC20\\n/// @notice Interface for the ZRC20 token contract.\\ninterface IZRC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    function deposit(address to, uint256 amount) external returns (bool);\\n\\n    function burn(uint256 amount) external returns (bool);\\n\\n    function withdraw(bytes memory to, uint256 amount) external returns (bool);\\n\\n    function withdrawGasFee() external view returns (address, uint256);\\n\\n    function withdrawGasFeeWithGasLimit(uint256 gasLimit) external view returns (address, uint256);\\n\\n    /// @dev Name is in upper case to maintain compatibility with ZRC20.sol v1\\n    function PROTOCOL_FLAT_FEE() external view returns (uint256);\\n\\n    /// @dev Name is in upper case to maintain compatibility with ZRC20.sol v1\\n    function GAS_LIMIT() external view returns (uint256);\\n\\n    function setName(string memory newName) external;\\n\\n    function setSymbol(string memory newSymbol) external;\\n}\\n\\n/// @title IZRC20Metadata\\n/// @notice Interface for the ZRC20 metadata.\\ninterface IZRC20Metadata is IZRC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\\n/// @title ZRC20Events\\n/// @notice Interface for the ZRC20 events.\\ninterface ZRC20Events {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Deposit(bytes from, address indexed to, uint256 value);\\n    event Withdrawal(address indexed from, bytes to, uint256 value, uint256 gasFee, uint256 protocolFlatFee);\\n    event UpdatedSystemContract(address systemContract);\\n    event UpdatedGateway(address gateway);\\n    event UpdatedGasLimit(uint256 gasLimit);\\n    event UpdatedProtocolFlatFee(uint256 protocolFlatFee);\\n}\\n\\n/// @dev Coin types for ZRC20. Zeta value should not be used.\\nenum CoinType {\\n    Zeta,\\n    Gas,\\n    ERC20\\n}\\n\",\"versionPragma\":\"0.8.26\"},\"@zetachain/protocol-contracts/contracts/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\n/// @title INotSupportedMethods\\n/// @notice Interface for contracts that with non supported methods.\\ninterface INotSupportedMethods {\\n    error ZETANotSupported();\\n    error CallOnRevertNotSupported();\\n}\\n\",\"versionPragma\":\"0.8.26\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {IERC1967} from \\\"../../interfaces/IERC1967.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This library provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit IERC1967.Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit IERC1967.AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the ERC-1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit IERC1967.BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.22\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC-1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC-1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC-1967 compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC-1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.22\"},\"@zetachain/protocol-contracts/contracts/zevm/interfaces/IWZETA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\n/// @title IWETH9\\n/// @notice Interface for the Weth9 contract.\\ninterface IWETH9 {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 wad) external returns (bool);\\n\\n    function transfer(address to, uint256 wad) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 wad) external returns (bool);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"versionPragma\":\"0.8.26\"},\"@zetachain/protocol-contracts/contracts/zevm/GatewayZEVM.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\nimport { CallOptions, IGatewayZEVM } from \\\"./interfaces/IGatewayZEVM.sol\\\";\\n\\nimport { INotSupportedMethods } from \\\"../../contracts/Errors.sol\\\";\\nimport { AbortContext, Abortable, RevertContext, RevertOptions, Revertable } from \\\"../../contracts/Revert.sol\\\";\\nimport \\\"./interfaces/IWZETA.sol\\\";\\nimport { IZRC20 } from \\\"./interfaces/IZRC20.sol\\\";\\nimport { MessageContext, UniversalContract } from \\\"./interfaces/UniversalContract.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\n\\n/// @title GatewayZEVM\\n/// @notice The GatewayZEVM contract is the endpoint to call smart contracts on omnichain.\\n/// @dev The contract doesn't hold any funds and should never have active allowances.\\ncontract GatewayZEVM is\\n    IGatewayZEVM,\\n    Initializable,\\n    AccessControlUpgradeable,\\n    UUPSUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    INotSupportedMethods\\n{\\n    /// @notice Error indicating a zero address was provided.\\n    error ZeroAddress();\\n\\n    /// @notice The constant address of the protocol\\n    address public constant PROTOCOL_ADDRESS = 0x735b14BB79463307AAcBED86DAf3322B1e6226aB;\\n    /// @notice The address of the Zeta token.\\n    address public zetaToken;\\n\\n    /// @notice New role identifier for pauser role.\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /// @notice Max size of message + revertOptions revert message.\\n    uint256 public constant MAX_MESSAGE_SIZE = 1024;\\n\\n    /// @dev Only protocol address allowed modifier.\\n    modifier onlyProtocol() {\\n        if (msg.sender != PROTOCOL_ADDRESS) {\\n            revert CallerIsNotProtocol();\\n        }\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initialize with address of zeta token and admin account set as DEFAULT_ADMIN_ROLE.\\n    /// @dev Using admin to authorize upgrades and pause.\\n    function initialize(address zetaToken_, address admin_) public initializer {\\n        if (zetaToken_ == address(0) || admin_ == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        __UUPSUpgradeable_init();\\n        __AccessControl_init();\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin_);\\n        _grantRole(PAUSER_ROLE, admin_);\\n        zetaToken = zetaToken_;\\n    }\\n\\n    /// @dev Authorizes the upgrade of the contract.\\n    /// @param newImplementation The address of the new implementation.\\n    function _authorizeUpgrade(address newImplementation) internal override onlyRole(DEFAULT_ADMIN_ROLE) { }\\n\\n    /// @dev Receive function to receive ZETA from WETH9.withdraw().\\n    receive() external payable whenNotPaused {\\n        if (msg.sender != zetaToken && msg.sender != PROTOCOL_ADDRESS) revert OnlyWZETAOrProtocol();\\n    }\\n\\n    /// @notice Pause contract.\\n    function pause() external onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    /// @notice Unpause contract.\\n    function unpause() external onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    /// @dev Private function to withdraw ZRC20 tokens.\\n    /// @param amount The amount of tokens to withdraw.\\n    /// @param zrc20 The address of the ZRC20 token.\\n    /// @return The gas fee for the withdrawal.\\n    function _withdrawZRC20(uint256 amount, address zrc20) private returns (uint256) {\\n        // Use gas limit from zrc20\\n        return _withdrawZRC20WithGasLimit(amount, zrc20, IZRC20(zrc20).GAS_LIMIT());\\n    }\\n\\n    /// @dev Private function to withdraw ZRC20 tokens with gas limit.\\n    /// @param amount The amount of tokens to withdraw.\\n    /// @param zrc20 The address of the ZRC20 token.\\n    /// @param gasLimit Gas limit.\\n    /// @return The gas fee for the withdrawal.\\n    function _withdrawZRC20WithGasLimit(uint256 amount, address zrc20, uint256 gasLimit) private returns (uint256) {\\n        (address gasZRC20, uint256 gasFee) = IZRC20(zrc20).withdrawGasFeeWithGasLimit(gasLimit);\\n        if (!IZRC20(gasZRC20).transferFrom(msg.sender, PROTOCOL_ADDRESS, gasFee)) {\\n            revert GasFeeTransferFailed();\\n        }\\n\\n        if (!IZRC20(zrc20).transferFrom(msg.sender, address(this), amount)) {\\n            revert ZRC20TransferFailed();\\n        }\\n\\n        if (!IZRC20(zrc20).burn(amount)) revert ZRC20BurnFailed();\\n\\n        return gasFee;\\n    }\\n\\n    /// @dev Private function to transfer ZETA tokens.\\n    /// @param amount The amount of tokens to transfer.\\n    /// @param to The address to transfer the tokens to.\\n    function _transferZETA(uint256 amount, address to) private {\\n        if (!IWETH9(zetaToken).transferFrom(msg.sender, address(this), amount)) revert FailedZetaSent();\\n        IWETH9(zetaToken).withdraw(amount);\\n        (bool sent,) = to.call{ value: amount }(\\\"\\\");\\n        if (!sent) revert FailedZetaSent();\\n    }\\n\\n    /// @notice Withdraw ZRC20 tokens to an external chain.\\n    /// @param receiver The receiver address on the external chain.\\n    /// @param amount The amount of tokens to withdraw.\\n    /// @param zrc20 The address of the ZRC20 token.\\n    /// @param revertOptions Revert options.\\n    function withdraw(\\n        bytes memory receiver,\\n        uint256 amount,\\n        address zrc20,\\n        RevertOptions calldata revertOptions\\n    )\\n        external\\n        whenNotPaused\\n    {\\n        if (receiver.length == 0) revert ZeroAddress();\\n        if (amount == 0) revert InsufficientZRC20Amount();\\n        if (revertOptions.revertMessage.length > MAX_MESSAGE_SIZE) revert MessageSizeExceeded();\\n\\n        uint256 gasFee = _withdrawZRC20(amount, zrc20);\\n        emit Withdrawn(\\n            msg.sender,\\n            0,\\n            receiver,\\n            zrc20,\\n            amount,\\n            gasFee,\\n            IZRC20(zrc20).PROTOCOL_FLAT_FEE(),\\n            \\\"\\\",\\n            CallOptions({ gasLimit: IZRC20(zrc20).GAS_LIMIT(), isArbitraryCall: true }),\\n            revertOptions\\n        );\\n    }\\n\\n    /// @notice Withdraw ZRC20 tokens and call a smart contract on an external chain.\\n    /// @param receiver The receiver address on the external chain.\\n    /// @param amount The amount of tokens to withdraw.\\n    /// @param zrc20 The address of the ZRC20 token.\\n    /// @param message The calldata to pass to the contract call.\\n    /// @param callOptions Call options including gas limit and arbirtrary call flag.\\n    /// @param revertOptions Revert options.\\n    function withdrawAndCall(\\n        bytes memory receiver,\\n        uint256 amount,\\n        address zrc20,\\n        bytes calldata message,\\n        CallOptions calldata callOptions,\\n        RevertOptions calldata revertOptions\\n    )\\n        external\\n        whenNotPaused\\n    {\\n        if (receiver.length == 0) revert ZeroAddress();\\n        if (amount == 0) revert InsufficientZRC20Amount();\\n        if (callOptions.gasLimit == 0) revert InsufficientGasLimit();\\n        if (message.length + revertOptions.revertMessage.length > MAX_MESSAGE_SIZE) revert MessageSizeExceeded();\\n\\n        uint256 gasFee = _withdrawZRC20WithGasLimit(amount, zrc20, callOptions.gasLimit);\\n        emit WithdrawnAndCalled(\\n            msg.sender,\\n            0,\\n            receiver,\\n            zrc20,\\n            amount,\\n            gasFee,\\n            IZRC20(zrc20).PROTOCOL_FLAT_FEE(),\\n            message,\\n            callOptions,\\n            revertOptions\\n        );\\n    }\\n\\n    /// @notice Withdraw ZETA tokens to an external chain.\\n    //// @param receiver The receiver address on the external chain.\\n    //// @param amount The amount of tokens to withdraw.\\n    //// @param revertOptions Revert options.\\n    function withdraw(\\n        bytes memory, /*receiver*/\\n        uint256, /*amount*/\\n        uint256, /*chainId*/\\n        RevertOptions calldata /*revertOptions*/\\n    )\\n        external\\n        view\\n        whenNotPaused\\n    {\\n        // TODO: remove error and comment out code once ZETA supported back\\n        // https://github.com/zeta-chain/protocol-contracts/issues/394\\n        // ZETA is not currently supported for withdraws\\n        revert ZETANotSupported();\\n\\n        // if (receiver.length == 0) revert ZeroAddress();\\n        // if (amount == 0) revert InsufficientZetaAmount();\\n        // if (revertOptions.revertMessage.length > MAX_MESSAGE_SIZE) revert MessageSizeExceeded();\\n\\n        // _transferZETA(amount, PROTOCOL_ADDRESS);\\n        // emit Withdrawn(\\n        //     msg.sender,\\n        //     chainId,\\n        //     receiver,\\n        //     address(zetaToken),\\n        //     amount,\\n        //     0,\\n        //     0,\\n        //     \\\"\\\",\\n        //     CallOptions({ gasLimit: 0, isArbitraryCall: true }),\\n        //     revertOptions\\n        // );\\n    }\\n\\n    /// @notice Withdraw ZETA tokens and call a smart contract on an external chain.\\n    //// @param receiver The receiver address on the external chain.\\n    //// @param amount The amount of tokens to withdraw.\\n    //// @param chainId Chain id of the external chain.\\n    //// @param message The calldata to pass to the contract call.\\n    //// @param callOptions Call options including gas limit and arbirtrary call flag.\\n    //// @param revertOptions Revert options.\\n    function withdrawAndCall(\\n        bytes memory, /*receiver*/\\n        uint256, /*amount*/\\n        uint256, /*chainId*/\\n        bytes calldata, /*message*/\\n        CallOptions calldata, /*callOptions*/\\n        RevertOptions calldata /*revertOptions*/\\n    )\\n        external\\n        view\\n        whenNotPaused\\n    {\\n        // TODO: remove error and comment out code once ZETA supported back\\n        // https://github.com/zeta-chain/protocol-contracts/issues/394\\n        // ZETA is not currently supported for withdraws\\n        revert ZETANotSupported();\\n\\n        // if (receiver.length == 0) revert ZeroAddress();\\n        // if (amount == 0) revert InsufficientZetaAmount();\\n        // if (callOptions.gasLimit == 0) revert InsufficientGasLimit();\\n        // if (message.length + revertOptions.revertMessage.length > MAX_MESSAGE_SIZE) revert MessageSizeExceeded();\\n\\n        // _transferZETA(amount, PROTOCOL_ADDRESS);\\n        // emit WithdrawnAndCalled(\\n        //     msg.sender, chainId, receiver, address(zetaToken), amount, 0, 0, message, callOptions, revertOptions\\n        // );\\n    }\\n\\n    /// @notice Call a smart contract on an external chain without asset transfer.\\n    /// @param receiver The receiver address on the external chain.\\n    /// @param zrc20 Address of zrc20 to pay fees.\\n    /// @param message The calldata to pass to the contract call.\\n    /// @param callOptions Call options including gas limit and arbirtrary call flag.\\n    /// @param revertOptions Revert options.\\n    function call(\\n        bytes memory receiver,\\n        address zrc20,\\n        bytes calldata message,\\n        CallOptions calldata callOptions,\\n        RevertOptions calldata revertOptions\\n    )\\n        external\\n        whenNotPaused\\n    {\\n        if (callOptions.gasLimit == 0) revert InsufficientGasLimit();\\n        if (message.length + revertOptions.revertMessage.length > MAX_MESSAGE_SIZE) revert MessageSizeExceeded();\\n\\n        _call(receiver, zrc20, message, callOptions, revertOptions);\\n    }\\n\\n    function _call(\\n        bytes memory receiver,\\n        address zrc20,\\n        bytes calldata message,\\n        CallOptions memory callOptions,\\n        RevertOptions memory revertOptions\\n    )\\n        private\\n    {\\n        if (receiver.length == 0) revert ZeroAddress();\\n\\n        (address gasZRC20, uint256 gasFee) = IZRC20(zrc20).withdrawGasFeeWithGasLimit(callOptions.gasLimit);\\n        if (!IZRC20(gasZRC20).transferFrom(msg.sender, PROTOCOL_ADDRESS, gasFee)) {\\n            revert GasFeeTransferFailed();\\n        }\\n\\n        emit Called(msg.sender, zrc20, receiver, message, callOptions, revertOptions);\\n    }\\n\\n    /// @notice Deposit foreign coins into ZRC20.\\n    /// @param zrc20 The address of the ZRC20 token.\\n    /// @param amount The amount of tokens to deposit.\\n    /// @param target The target address to receive the deposited tokens.\\n    function deposit(address zrc20, uint256 amount, address target) external onlyProtocol whenNotPaused {\\n        if (zrc20 == address(0) || target == address(0)) revert ZeroAddress();\\n        if (amount == 0) revert InsufficientZRC20Amount();\\n\\n        if (target == PROTOCOL_ADDRESS || target == address(this)) revert InvalidTarget();\\n\\n        if (!IZRC20(zrc20).deposit(target, amount)) revert ZRC20DepositFailed();\\n    }\\n\\n    /// @notice Execute a user-specified contract on ZEVM.\\n    /// @param context The context of the cross-chain call.\\n    /// @param zrc20 The address of the ZRC20 token.\\n    /// @param amount The amount of tokens to transfer.\\n    /// @param target The target contract to call.\\n    /// @param message The calldata to pass to the contract call.\\n    function execute(\\n        MessageContext calldata context,\\n        address zrc20,\\n        uint256 amount,\\n        address target,\\n        bytes calldata message\\n    )\\n        external\\n        nonReentrant\\n        onlyProtocol\\n        whenNotPaused\\n    {\\n        if (zrc20 == address(0) || target == address(0)) revert ZeroAddress();\\n\\n        UniversalContract(target).onCall(context, zrc20, amount, message);\\n    }\\n\\n    /// @notice Deposit foreign coins into ZRC20 and call a user-specified contract on ZEVM.\\n    /// @param context The context of the cross-chain call.\\n    /// @param zrc20 The address of the ZRC20 token.\\n    /// @param amount The amount of tokens to transfer.\\n    /// @param target The target contract to call.\\n    /// @param message The calldata to pass to the contract call.\\n    function depositAndCall(\\n        MessageContext calldata context,\\n        address zrc20,\\n        uint256 amount,\\n        address target,\\n        bytes calldata message\\n    )\\n        external\\n        nonReentrant\\n        onlyProtocol\\n        whenNotPaused\\n    {\\n        if (zrc20 == address(0) || target == address(0)) revert ZeroAddress();\\n        if (amount == 0) revert InsufficientZRC20Amount();\\n        if (target == PROTOCOL_ADDRESS || target == address(this)) revert InvalidTarget();\\n\\n        if (!IZRC20(zrc20).deposit(target, amount)) revert ZRC20DepositFailed();\\n        UniversalContract(target).onCall(context, zrc20, amount, message);\\n    }\\n\\n    /// @notice Deposit ZETA and call a user-specified contract on ZEVM.\\n    /// @param context The context of the cross-chain call.\\n    /// @param amount The amount of tokens to transfer.\\n    /// @param target The target contract to call.\\n    /// @param message The calldata to pass to the contract call.\\n    function depositAndCall(\\n        MessageContext calldata context,\\n        uint256 amount,\\n        address target,\\n        bytes calldata message\\n    )\\n        external\\n        nonReentrant\\n        onlyProtocol\\n        whenNotPaused\\n    {\\n        if (target == address(0)) revert ZeroAddress();\\n        if (amount == 0) revert InsufficientZetaAmount();\\n        if (target == PROTOCOL_ADDRESS || target == address(this)) revert InvalidTarget();\\n\\n        _transferZETA(amount, target);\\n        UniversalContract(target).onCall(context, zetaToken, amount, message);\\n    }\\n\\n    /// @notice Revert a user-specified contract on ZEVM.\\n    /// @param target The target contract to call.\\n    /// @param revertContext Revert context to pass to onRevert.\\n    function executeRevert(\\n        address target,\\n        RevertContext calldata revertContext\\n    )\\n        external\\n        nonReentrant\\n        onlyProtocol\\n        whenNotPaused\\n    {\\n        if (target == address(0)) revert ZeroAddress();\\n\\n        Revertable(target).onRevert(revertContext);\\n    }\\n\\n    /// @notice Deposit foreign coins into ZRC20 and revert a user-specified contract on ZEVM.\\n    /// @param zrc20 The address of the ZRC20 token.\\n    /// @param amount The amount of tokens to revert.\\n    /// @param target The target contract to call.\\n    /// @param revertContext Revert context to pass to onRevert.\\n    function depositAndRevert(\\n        address zrc20,\\n        uint256 amount,\\n        address target,\\n        RevertContext calldata revertContext\\n    )\\n        external\\n        nonReentrant\\n        onlyProtocol\\n        whenNotPaused\\n    {\\n        if (zrc20 == address(0) || target == address(0)) revert ZeroAddress();\\n        if (amount == 0) revert InsufficientZRC20Amount();\\n        if (target == PROTOCOL_ADDRESS || target == address(this)) revert InvalidTarget();\\n\\n        if (!IZRC20(zrc20).deposit(target, amount)) revert ZRC20DepositFailed();\\n        Revertable(target).onRevert(revertContext);\\n    }\\n\\n    /// @notice Call onAbort on a user-specified contract on ZEVM.\\n    /// this function doesn't deposit the asset to the target contract. This operation is done directly by the protocol.\\n    /// the assets are deposited to the target contract even if onAbort reverts.\\n    /// @param target The target contract to call.\\n    /// @param abortContext Abort context to pass to onAbort.\\n    function executeAbort(\\n        address target,\\n        AbortContext calldata abortContext\\n    )\\n        external\\n        nonReentrant\\n        onlyProtocol\\n        whenNotPaused\\n    {\\n        if (target == address(0)) revert ZeroAddress();\\n        Abortable(target).onAbort(abortContext);\\n    }\\n}\\n\",\"versionPragma\":\"0.8.26\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"}}}","address":"0x2b81CA6bc0a4759BA7474cC5a1E3DD5c9A4c952c","bytecode":"0x60e0604052600160095534801561001557600080fd5b506040516136e43803806136e48339810160408190526100349161016a565b6001600160a01b0389811660805288811660a052600080546001600160a01b03199081168a841617909155600180548216898416179055600287905560038054909116918616919091179055600461008c848261034b565b506001600160a01b0382811660c0819052600780546001600160a01b03191684841617905560805160405163095ea7b360e01b81529216600483015260001960248301529063095ea7b3906044016020604051808303816000875af11580156100f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061011d9190610409565b50505050505050505050610432565b6001600160a01b038116811461014157600080fd5b50565b805161014f8161012c565b919050565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060008060006101208a8c03121561018957600080fd5b89516101948161012c565b60208b01519099506101a58161012c565b60408b01519098506101b68161012c565b60608b01519097506101c78161012c565b60808b015160a08c015191975095506101df8161012c565b60c08b01519094506001600160401b038111156101fb57600080fd5b8a016000601f82018d1361020d578081fd5b81516001600160401b0381111561022657610226610154565b604051601f8201601f19908116603f011681016001600160401b038111828210171561025457610254610154565b6040528181528382016020018f101561026b578283fd5b825b828110156102895760208186018101518383018201520161026d565b509081016020019190915293506102a4905060e08b01610144565b91506102b36101008b01610144565b90509295985092959850929598565b600181811c908216806102d657607f821691505b6020821081036102f657634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561034657806000526020600020601f840160051c810160208510156103235750805b601f840160051c820191505b81811015610343576000815560010161032f565b50505b505050565b81516001600160401b0381111561036457610364610154565b6103788161037284546102c2565b846102fc565b6020601f8211600181146103ac57600083156103945750848201515b600019600385901b1c1916600184901b178455610343565b600084815260208120601f198516915b828110156103dc57878501518255602094850194600190920191016103bc565b50848210156103fa5786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b60006020828403121561041b57600080fd5b8151801515811461042b57600080fd5b9392505050565b60805160a05160c05161322f6104b5600039600081816103f401528181611328015281816113e7015281816120ee0152818161217b01526122b00152600081816107090152610c130152600081816102ea015281816108db0152818161096f01528181610b95015281816111b2015281816114810152612281015261322f6000f3fe6080604052600436106101e65760003560e01c8063542f0e6011610102578063a85c38ef11610095578063d986696311610064578063d986696314610697578063f199aeb0146106b7578063f2fde38b146106d7578063f5d6ac90146106f757600080fd5b8063a85c38ef146105a8578063c31c9c071461062a578063c9028a361461064a578063d0cb96e31461066a57600080fd5b806387f438c4116100d157806387f438c4146105015780638da5cb5b1461052e578063924d68e31461054e57806393705f321461057b57600080fd5b8063542f0e601461048c5780635b06dece146104ac5780635bcfd616146104cc57806382894ced146104ec57600080fd5b80632a58b3301161017a5780633a219c29116101495780633a219c291461041657806342cb987314610436578063448e00c91461044c578063514fcac71461046c57600080fd5b80632a58b330146103825780632d4cfb7e14610398578063330c5358146103b857806338f22fad146103e257600080fd5b806311eac855116101b657806311eac8551461032457806317a85b1a146103445780631d3663501461034c5780632357928e1461036257600080fd5b8062df475e146102695780630157a3961461029457806306cb8983146102b8578063116191b6146102d857600080fd5b3661026457341561026257346005600082825461020391906126cb565b9091555050336000908152600b6020526040812080543492906102279084906126cb565b909155505060405134815233907ff6f389e2ea92f4038cd331306f11337f16086e9eac150cbcbf14eaa98a0b0ffb9060200160405180910390a25b005b600080fd5b34801561027557600080fd5b5061027e61072b565b60405161028b919061272a565b60405180910390f35b3480156102a057600080fd5b506102aa60055481565b60405190815260200161028b565b3480156102c457600080fd5b506102626102d3366004612945565b6107b9565b3480156102e457600080fd5b5061030c7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161028b565b34801561033057600080fd5b5060015461030c906001600160a01b031681565b6102626109e9565b34801561035857600080fd5b506102aa60025481565b34801561036e57600080fd5b5061026261037d366004612a28565b610a7c565b34801561038e57600080fd5b506102aa60095481565b3480156103a457600080fd5b506102626103b3366004612a41565b610b8a565b3480156103c457600080fd5b506103cd610c0c565b6040805192835260208301919091520161028b565b3480156103ee57600080fd5b5061030c7f000000000000000000000000000000000000000000000000000000000000000081565b34801561042257600080fd5b50610262610431366004612a7b565b610cbe565b34801561044257600080fd5b506102aa60065481565b34801561045857600080fd5b5060035461030c906001600160a01b031681565b34801561047857600080fd5b50610262610487366004612a28565b610d08565b34801561049857600080fd5b506102626104a7366004612a28565b610ee2565b3480156104b857600080fd5b506102626104c7366004612a28565b611053565b3480156104d857600080fd5b506102626104e7366004612aa7565b6111a7565b3480156104f857600080fd5b506102626112e6565b34801561050d57600080fd5b506102aa61051c366004612b36565b600c6020526000908152604090205481565b34801561053a57600080fd5b5060075461030c906001600160a01b031681565b34801561055a57600080fd5b506102aa610569366004612b36565b600b6020526000908152604090205481565b34801561058757600080fd5b506102aa610596366004612b36565b600a6020526000908152604090205481565b3480156105b457600080fd5b506106166105c3366004612a28565b600860205260009081526040902080546001820154600283015460038401546004850154600586015460069096015494956001600160a01b03909416949293919290919060ff8082169161010090041688565b60405161028b989796959493929190612b8b565b34801561063657600080fd5b5060005461030c906001600160a01b031681565b34801561065657600080fd5b50610262610665366004612be0565b611476565b34801561067657600080fd5b506102aa610685366004612b36565b600d6020526000908152604090205481565b3480156106a357600080fd5b506102626106b2366004612a28565b6114ed565b3480156106c357600080fd5b506102626106d2366004612c1a565b61160d565b3480156106e357600080fd5b506102626106f2366004612b36565b6116c2565b34801561070357600080fd5b5061030c7f000000000000000000000000000000000000000000000000000000000000000081565b6004805461073890612c4c565b80601f016020809104026020016040519081016040528092919081815260200182805461076490612c4c565b80156107b15780601f10610786576101008083540402835291602001916107b1565b820191906000526020600020905b81548152906001019060200180831161079457829003601f168201915b505050505081565b815160405163fc5fecd560e01b81526000916001600160a01b0388169163fc5fecd5916107ec9160040190815260200190565b6040805180830381865afa158015610808573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082c9190612c86565b6040516323b872dd60e01b8152336004820152306024820152604481018290529092506001600160a01b03881691506323b872dd906064016020604051808303816000875af1158015610883573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a79190612cb4565b6108c4576040516312171d8360e31b815260040160405180910390fd5b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820183905287169063095ea7b3906044016020604051808303816000875af1158015610933573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109579190612cb4565b506040516306cb898360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906306cb8983906109ae908a908a908a908a908a908a90600401612d53565b600060405180830381600087803b1580156109c857600080fd5b505af11580156109dc573d6000803e3d6000fd5b5050505050505050505050565b34600003610a0a5760405163356680b760e01b815260040160405180910390fd5b3460056000828254610a1c91906126cb565b9091555050336000908152600b602052604081208054349290610a409084906126cb565b909155505060405134815233907ff6f389e2ea92f4038cd331306f11337f16086e9eac150cbcbf14eaa98a0b0ffb9060200160405180910390a2565b6001546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610ad3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af79190612cb4565b610b14576040516312171d8360e31b815260040160405180910390fd5b336000908152600a602052604081208054839290610b339084906126cb565b925050819055508060066000828254610b4c91906126cb565b909155505060405181815233907f36e229bdaedfa85d503535ae31c3ac9e40d88f1ab4fa53870ef2da82df48e990906020015b60405180910390a250565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bd2576040516282b42960e81b815260040160405180910390fd5b7f1db2949e4142fe8b641ad8aad998e42b8968ccf18acb94c49c4c9f5d67eaa92781604051610c019190612e01565b60405180910390a150565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166396834ad36002546040518263ffffffff1660e01b8152600401610c6191815260200190565b608060405180830381865afa158015610c7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca29190612ec8565b80516060909101516001600160401b0390911694909350915050565b6009805460009182610ccf83612f44565b90915550600081815260086020526040902060010180546001600160a01b031916331790559050610d0284848484611764565b50505050565b8060095481101580610d315750600081815260086020526040902060060154610100900460ff16155b15610d4f5760405163af61069360e01b815260040160405180910390fd5b600082815260086020526040902060018101546001600160a01b03163314610d89576040516282b42960e81b815260040160405180910390fd5b60068101805461ff0019811690915560019060ff1681811115610dae57610dae612b53565b03610e2557600281015460018201546001600160a01b03166000908152600b602052604081208054909190610de49084906126cb565b9091555050600281015460018201546001600160a01b03166000908152600d602052604081208054909190610e1a908490612f5d565b90915550610eb29050565b6000620f424082600301548360020154610e3f9190612f70565b610e499190612f87565b60018301546001600160a01b03166000908152600a6020526040812080549293508392909190610e7a9084906126cb565b909155505060018201546001600160a01b03166000908152600c602052604081208054839290610eab908490612f5d565b9091555050505b60405183907f61b9399f2f0f32ca39ce8d7be32caed5ec22fe07a6daba3a467ed479ec60658290600090a2505050565b336000908152600b6020526040902054811115610f125760405163356680b760e01b815260040160405180910390fd5b806005541015610f355760405163356680b760e01b815260040160405180910390fd5b336000908152600b602052604081208054839290610f54908490612f5d565b925050819055508060056000828254610f6d9190612f5d565b9091555050604051600090339083908381818185875af1925050503d8060008114610fb4576040519150601f19603f3d011682016040523d82523d6000602084013e610fb9565b606091505b505090508061101a57336000908152600b602052604081208054849290610fe19084906126cb565b925050819055508160056000828254610ffa91906126cb565b925050819055506040516312171d8360e31b815260040160405180910390fd5b60405182815233907f97d3cdd2b1f7e0e603ddc33073045d3f3defbcd5b4c07a834f86892d159710389060200160405180910390a25050565b336000908152600a60205260409020548111156110835760405163356680b760e01b815260040160405180910390fd5b8060065410156110a65760405163356680b760e01b815260040160405180910390fd5b336000908152600a6020526040812080548392906110c5908490612f5d565b9250508190555080600660008282546110de9190612f5d565b909155505060015460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015611134573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111589190612cb4565b611175576040516312171d8360e31b815260040160405180910390fd5b60405181815233907f0d1589f631deb2542273b007140b132a18d48a4303d103fe64d353db07e01b5790602001610b7f565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111ef576040516282b42960e81b815260040160405180910390fd5b6000600482106112005750813560e01c5b63c982bb2760e01b6001600160e01b031982160161125957600954600484013590811080156112455750600081815260086020526040902060060154610100900460ff165b1561125357611253816114ed565b506112de565b7f39f8c79736fed93bca390bb3d6ff7da07482edb61cd7dafcfba496821d6ab7a36040516112d5906040808252601290820152712432b636379037b7102d32ba30a1b430b4b760711b60608201526080602082018190526010908201526f5265636569766564206d65737361676560801b60a082015260c00190565b60405180910390a15b505050505050565b6007546001600160a01b03163314611310576040516282b42960e81b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611377573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139b9190612fa9565b9050806000036113be5760405163356680b760e01b815260040160405180910390fd5b60075460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af1158015611432573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114569190612cb4565b611473576040516312171d8360e31b815260040160405180910390fd5b50565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146114be576040516282b42960e81b815260040160405180910390fd5b7fa7a2dd1f61a16e9be16558337ccaf27e4bb90761ccfab75065f0003f25a1403781604051610c019190612fc2565b80600954811015806115165750600081815260086020526040902060060154610100900460ff16155b156115345760405163af61069360e01b815260040160405180910390fd5b60008281526008602052604081209061154b610c0c565b509050611559816064612f70565b905060006001600684015460ff16600181111561157857611578612b53565b0361158b57506004820154811015611595565b5060038201548111155b60038301546004840154604080518581526020810193909352820152811515606082015285907f5f4075d4a73b8c52158e90425d0d467d34b5cf3f5296c6c6e7a72b4f9d64544e9060800160405180910390a280156115fd576115f8858361195c565b611606565b6116068561207e565b5050505050565b6000620f424061161d8587612f70565b6116279190612f87565b336000908152600a602052604090205490915081111561165a5760405163356680b760e01b815260040160405180910390fd5b6103e882111561167d5760405163af61069360e01b815260040160405180910390fd5b600980546000918261168e83612f44565b90915550600081815260086020526040902060010180546001600160a01b0319163317905590506112de86868686856123a5565b6007546001600160a01b031633146116ec576040516282b42960e81b815260040160405180910390fd5b6001600160a01b038116611712576040516282b42960e81b815260040160405180910390fd5b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000818152600860209081526040808320600101546001600160a01b0316808452600b90925282205490918190036117af5760405163356680b760e01b815260040160405180910390fd5b6103e88411156117d25760405163af61069360e01b815260040160405180910390fd5b6001600160a01b0382166000908152600b6020526040812080548392906117fa908490612f5d565b90915550506001600160a01b0382166000908152600d6020526040812080548392906118279084906126cb565b909155505060408051610100810182528481526001600160a01b038481166020808401918252838501868152606085018c8152608086018c815260a087018c8152600160c0890181815260e08a0182905260008e815260089097529990952088518155955186860180546001600160a01b0319169190981617909655915160028501555160038401555160048301559151600582015592516006840180549394939192909160ff19169083818111156118e2576118e2612b53565b021790555060e08201518160060160016101000a81548160ff021916908315150217905550905050816001600160a01b0316837fbca4816edaab33691a6807e1676a051d59ee0cfdaf4854d8a8a4785025b27cfd6001848a8a60405161194b949392919061305d565b60405180910390a36112de836114ed565b60008281526008602052604090206001600682015460ff16600181111561198557611985612b53565b03611c095760006402540be40082600501546127106119a49190612f5d565b836004015484600201546119b89190612f70565b6119c29190612f70565b6119cc9190612f87565b6040805160e081018252735f0b1a82749cb4e2278ec87f8bf6b618dc71a8bf81526001546001600160a01b03166020820152309181019190915290915060009060608101611a1c426103846126cb565b8152600285015460208201819052604080830186905260006060909301839052915491516304c76d0d60e31b81529293506001600160a01b039091169163263b68689190611a6e908590600401613086565b60206040518083038185885af193505050508015611aa9575060408051601f3d908101601f19168201909252611aa691810190612fa9565b60015b611ab6576116068561207e565b82811015611ac7576112de8661207e565b60018401546001600160a01b03166000908152600a602052604081208054839290611af39084906126cb565b9091555050600284015460018501546001600160a01b03166000908152600d602052604081208054909190611b29908490612f5d565b925050819055508060066000828254611b4291906126cb565b9091555050600284015460058054600090611b5e908490612f5d565b9091555050600154600285015460408051600081526001600160a01b039093166020840152820152606081018290527fe3a6c3905c6f07647dc87b04150250121d312e6273863eb41ab1d8001132dc469060800160405180910390a1857fc12f92cbba8a6bc549f0a1c14d4fc0e716850e8ce0b8371d61247ea355f5ea38866001604051611bed9291906130df565b60405180910390a2611c008660006125c1565b6112de8661207e565b6000620f424082600301548360020154611c239190612f70565b611c2d9190612f87565b905060006127108360050154612710611c469190612f5d565b8460020154611c559190612f70565b611c5f9190612f87565b60015460005460405163095ea7b360e01b81526001600160a01b03918216600482015260248101869052929350169063095ea7b3906044016020604051808303816000875af1158015611cb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cda9190612cb4565b506040805160e0810182526001546001600160a01b03168152735f0b1a82749cb4e2278ec87f8bf6b618dc71a8bf6020820152309181019190915260009060608101611d28426103846126cb565b81526020810185905260408082018590526000606090920182905290549051630109bc7360e71b81529192506001600160a01b0316906384de398090611d72908490600401613086565b6020604051808303816000875af1925050508015611dad575060408051601f3d908101601f19168201909252611daa91810190612fa9565b60015b611e37576001546000805460405163095ea7b360e01b81526001600160a01b03918216600482015260248101929092529091169063095ea7b3906044016020604051808303816000875af1158015611e09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e2d9190612cb4565b506112de8661207e565b82811015611ece576001546000805460405163095ea7b360e01b81526001600160a01b03918216600482015260248101929092529091169063095ea7b3906044016020604051808303816000875af1158015611e97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ebb9190612cb4565b50611ec58761207e565b50505050505050565b60018501546001600160a01b03166000908152600b602052604081208054839290611efa9084906126cb565b909155505060018501546001600160a01b03166000908152600d602052604081208054839290611f2b908490612f5d565b925050819055508060056000828254611f4491906126cb565b925050819055508360066000828254611f5d9190612f5d565b90915550506001546000805460405163095ea7b360e01b81526001600160a01b03918216600482015260248101929092529091169063095ea7b3906044016020604051808303816000875af1158015611fba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fde9190612cb4565b50600154604080516001600160a01b039092168252600060208301528101859052606081018290527fe3a6c3905c6f07647dc87b04150250121d312e6273863eb41ab1d8001132dc469060800160405180910390a1867fc12f92cbba8a6bc549f0a1c14d4fc0e716850e8ce0b8371d61247ea355f5ea388760006040516120669291906130df565b60405180910390a26120798760016125c1565b611ec5875b60408051808201825262030d4080825260006020808401829052845160a08101865282815280820183905280860183905285519182018652828252606081019190915260808101929092528251935163fc5fecd560e01b8152600481019490945291929091906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063fc5fecd5906024016040805180830381865afa158015612134573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121589190612c86565b6040516370a0823160e01b81523060048201529092508291506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156121c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e69190612fa9565b10156122055760405163356680b760e01b815260040160405180910390fd5b60008460405160240161221a91815260200190565b60408051601f19818403018152918152602080830180516001600160e01b031663367d44d960e01b179052905191925060009161225a91600491016130f3565b60408051601f19818403018152908290526306cb898360e01b825291506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906306cb8983906122de9084907f00000000000000000000000000000000000000000000000000000000000000009087908b908b90600401613192565b600060405180830381600087803b1580156122f857600080fd5b505af1925050508015612309575060015b6123265760405163337a511360e21b815260040160405180910390fd5b7f39f8c79736fed93bca390bb3d6ff7da07482edb61cd7dafcfba496821d6ab7a36040516112d5906040808252601490820152732d32ba30a437b83832b91d2d32ba30a1b430b4b760611b6060820152608060208201819052601190820152704f7574626f756e642043616c6c6261636b60781b60a082015260c00190565b6000818152600860205260408120600101546001600160a01b031690620f42406123cf8789612f70565b6123d99190612f87565b6001600160a01b0383166000908152600a60205260409020549091508111156124155760405163356680b760e01b815260040160405180910390fd5b6103e88411156124385760405163af61069360e01b815260040160405180910390fd5b6001600160a01b0382166000908152600a602052604081208054839290612460908490612f5d565b90915550506001600160a01b0382166000908152600c60205260408120805483929061248d9084906126cb565b909155505060408051610100810182528481526001600160a01b0384811660208084019182528385018c8152606085018c8152608086018c815260a087018c8152600060c08901818152600160e08b018190528e8352600890975299902088518155955186860180546001600160a01b0319169190981617909655915160028501555160038401555160048301559151600582015592516006840180549394939192909160ff191690838181111561254757612547612b53565b021790555060e08201518160060160016101000a81548160ff021916908315150217905550905050816001600160a01b0316837fbca4816edaab33691a6807e1676a051d59ee0cfdaf4854d8a8a4785025b27cfd60008a8a8a6040516125b0949392919061305d565b60405180910390a3611ec5836114ed565b60018160018111156125d5576125d5612b53565b0361260857600082815260086020526040902060038101546004820154600590920154612603929085611764565b61267f565b600082815260086020908152604080832060038101546001909101546001600160a01b03168452600a909252822054620f42409161264591612f70565b61264f9190612f87565b60008481526008602052604090206003810154600482015460059092015492935061267d92849290876123a5565b505b6000828152600860205260409020600601805482919060ff1916600183818111156126ac576126ac612b53565b02179055505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156126de576126de6126b5565b92915050565b6000815180845260005b8181101561270a576020818501810151868301820152016126ee565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061273d60208301846126e4565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171561277c5761277c612744565b60405290565b604051608081016001600160401b038111828210171561277c5761277c612744565b600082601f8301126127b557600080fd5b81356001600160401b038111156127ce576127ce612744565b604051601f8201601f19908116603f011681016001600160401b03811182821017156127fc576127fc612744565b60405281815283820160200185101561281457600080fd5b816020850160208301376000918101602001919091529392505050565b6001600160a01b038116811461147357600080fd5b60008083601f84011261285857600080fd5b5081356001600160401b0381111561286f57600080fd5b60208301915083602082850101111561288757600080fd5b9250929050565b801515811461147357600080fd5b600060a082840312156128ae57600080fd5b60405160a081016001600160401b03811182821017156128d0576128d0612744565b60405290508082356128e181612831565b815260208301356128f18161288e565b6020820152604083013561290481612831565b604082015260608301356001600160401b0381111561292257600080fd5b61292e858286016127a4565b606083015250608092830135920191909152919050565b60008060008060008086880360c081121561295f57600080fd5b87356001600160401b0381111561297557600080fd5b6129818a828b016127a4565b975050602088013561299281612831565b955060408801356001600160401b038111156129ad57600080fd5b6129b98a828b01612846565b9096509450506040605f19820112156129d157600080fd5b506129da61275a565b6060880135815260808801356129ef8161288e565b6020820152915060a08701356001600160401b03811115612a0f57600080fd5b612a1b89828a0161289c565b9150509295509295509295565b600060208284031215612a3a57600080fd5b5035919050565b600060208284031215612a5357600080fd5b81356001600160401b03811115612a6957600080fd5b820160c0818503121561273d57600080fd5b600080600060608486031215612a9057600080fd5b505081359360208301359350604090920135919050565b600080600080600060808688031215612abf57600080fd5b85356001600160401b03811115612ad557600080fd5b860160608189031215612ae757600080fd5b94506020860135612af781612831565b93506040860135925060608601356001600160401b03811115612b1957600080fd5b612b2588828901612846565b969995985093965092949392505050565b600060208284031215612b4857600080fd5b813561273d81612831565b634e487b7160e01b600052602160045260246000fd5b60028110612b8757634e487b7160e01b600052602160045260246000fd5b9052565b8881526001600160a01b038816602082015260408101879052606081018690526080810185905260a081018490526101008101612bcb60c0830185612b69565b82151560e08301529998505050505050505050565b600060208284031215612bf257600080fd5b81356001600160401b03811115612c0857600080fd5b82016080818503121561273d57600080fd5b60008060008060808587031215612c3057600080fd5b5050823594602084013594506040840135936060013592509050565b600181811c90821680612c6057607f821691505b602082108103612c8057634e487b7160e01b600052602260045260246000fd5b50919050565b60008060408385031215612c9957600080fd5b8251612ca481612831565b6020939093015192949293505050565b600060208284031215612cc657600080fd5b815161273d8161288e565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60018060a01b03815116825260208101511515602083015260018060a01b0360408201511660408301526000606082015160a06060850152612d3f60a08501826126e4565b608093840151949093019390935250919050565b60c081526000612d6660c08301896126e4565b6001600160a01b03881660208401528281036040840152612d88818789612cd1565b85516060850152602086015115156080850152905082810360a0840152612daf8185612cfa565b9998505050505050505050565b6000808335601e19843603018112612dd357600080fd5b83016020810192503590506001600160401b03811115612df257600080fd5b80360382131561288757600080fd5b60408152601260408201527120b137b93a1037b7102d32ba30a1b430b4b760711b6060820152608060208201526000612e3a8384612dbc565b60c06080850152612e5061014085018284612cd1565b9150506020840135612e6181612831565b6001600160a01b031660a0840152604084013560c08401526060840135612e878161288e565b151560e08401526080840135610100840152612ea660a0850185612dbc565b848303607f1901610120860152612ebe838284612cd1565b9695505050505050565b60006080828403128015612edb57600080fd5b506000612ee6612782565b83518060070b8114612ef6578283fd5b815260208401516001600160401b0381168114612f11578283fd5b60208201526040840151600381900b8114612f2a578283fd5b604082015260609384015193810193909352509092915050565b600060018201612f5657612f566126b5565b5060010190565b818103818111156126de576126de6126b5565b80820281158282048414176126de576126de6126b5565b600082612fa457634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215612fbb57600080fd5b5051919050565b6040815260136040820152722932bb32b93a1037b7102d32ba30a1b430b4b760691b60608201526080602082015260008235612ffd81612831565b6001600160a01b03166080830152602083013561301981612831565b6001600160a01b031660a0830152604083013560c083015261303e6060840184612dbc565b608060e085015261305461010085018284612cd1565b95945050505050565b6080810161306b8287612b69565b84602083015283604083015282606083015295945050505050565b81516001600160a01b039081168252602080840151821690830152604080840151821690830152606080840151908301526080808401519083015260a0838101519083015260c092830151169181019190915260e00190565b8281526040810161273d6020830184612b69565b6000808354818160011c9050600182168061310f57607f821691505b60208210810361312d57634e487b7160e01b84526022600452602484fd5b808015613141576001811461315657613186565b60ff1984168752821515830287019450613186565b60008881526020902060005b8481101561317e57815489820152600190910190602001613162565b505082870194505b50929695505050505050565b60c0815260006131a560c08301886126e4565b6001600160a01b038716602084015282810360408401526131c681876126e4565b85516060850152602086015115156080850152905082810360a08401526131ed8185612cfa565b9897505050505050505056fea2646970667358221220e14e93df0ddd725d7bf8a4c12bec60a06ba40936a3188df4c1358f0e337084a864736f6c634300081a0033","deployedBytecode":"0x6080604052600436106101e65760003560e01c8063542f0e6011610102578063a85c38ef11610095578063d986696311610064578063d986696314610697578063f199aeb0146106b7578063f2fde38b146106d7578063f5d6ac90146106f757600080fd5b8063a85c38ef146105a8578063c31c9c071461062a578063c9028a361461064a578063d0cb96e31461066a57600080fd5b806387f438c4116100d157806387f438c4146105015780638da5cb5b1461052e578063924d68e31461054e57806393705f321461057b57600080fd5b8063542f0e601461048c5780635b06dece146104ac5780635bcfd616146104cc57806382894ced146104ec57600080fd5b80632a58b3301161017a5780633a219c29116101495780633a219c291461041657806342cb987314610436578063448e00c91461044c578063514fcac71461046c57600080fd5b80632a58b330146103825780632d4cfb7e14610398578063330c5358146103b857806338f22fad146103e257600080fd5b806311eac855116101b657806311eac8551461032457806317a85b1a146103445780631d3663501461034c5780632357928e1461036257600080fd5b8062df475e146102695780630157a3961461029457806306cb8983146102b8578063116191b6146102d857600080fd5b3661026457341561026257346005600082825461020391906126cb565b9091555050336000908152600b6020526040812080543492906102279084906126cb565b909155505060405134815233907ff6f389e2ea92f4038cd331306f11337f16086e9eac150cbcbf14eaa98a0b0ffb9060200160405180910390a25b005b600080fd5b34801561027557600080fd5b5061027e61072b565b60405161028b919061272a565b60405180910390f35b3480156102a057600080fd5b506102aa60055481565b60405190815260200161028b565b3480156102c457600080fd5b506102626102d3366004612945565b6107b9565b3480156102e457600080fd5b5061030c7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161028b565b34801561033057600080fd5b5060015461030c906001600160a01b031681565b6102626109e9565b34801561035857600080fd5b506102aa60025481565b34801561036e57600080fd5b5061026261037d366004612a28565b610a7c565b34801561038e57600080fd5b506102aa60095481565b3480156103a457600080fd5b506102626103b3366004612a41565b610b8a565b3480156103c457600080fd5b506103cd610c0c565b6040805192835260208301919091520161028b565b3480156103ee57600080fd5b5061030c7f000000000000000000000000000000000000000000000000000000000000000081565b34801561042257600080fd5b50610262610431366004612a7b565b610cbe565b34801561044257600080fd5b506102aa60065481565b34801561045857600080fd5b5060035461030c906001600160a01b031681565b34801561047857600080fd5b50610262610487366004612a28565b610d08565b34801561049857600080fd5b506102626104a7366004612a28565b610ee2565b3480156104b857600080fd5b506102626104c7366004612a28565b611053565b3480156104d857600080fd5b506102626104e7366004612aa7565b6111a7565b3480156104f857600080fd5b506102626112e6565b34801561050d57600080fd5b506102aa61051c366004612b36565b600c6020526000908152604090205481565b34801561053a57600080fd5b5060075461030c906001600160a01b031681565b34801561055a57600080fd5b506102aa610569366004612b36565b600b6020526000908152604090205481565b34801561058757600080fd5b506102aa610596366004612b36565b600a6020526000908152604090205481565b3480156105b457600080fd5b506106166105c3366004612a28565b600860205260009081526040902080546001820154600283015460038401546004850154600586015460069096015494956001600160a01b03909416949293919290919060ff8082169161010090041688565b60405161028b989796959493929190612b8b565b34801561063657600080fd5b5060005461030c906001600160a01b031681565b34801561065657600080fd5b50610262610665366004612be0565b611476565b34801561067657600080fd5b506102aa610685366004612b36565b600d6020526000908152604090205481565b3480156106a357600080fd5b506102626106b2366004612a28565b6114ed565b3480156106c357600080fd5b506102626106d2366004612c1a565b61160d565b3480156106e357600080fd5b506102626106f2366004612b36565b6116c2565b34801561070357600080fd5b5061030c7f000000000000000000000000000000000000000000000000000000000000000081565b6004805461073890612c4c565b80601f016020809104026020016040519081016040528092919081815260200182805461076490612c4c565b80156107b15780601f10610786576101008083540402835291602001916107b1565b820191906000526020600020905b81548152906001019060200180831161079457829003601f168201915b505050505081565b815160405163fc5fecd560e01b81526000916001600160a01b0388169163fc5fecd5916107ec9160040190815260200190565b6040805180830381865afa158015610808573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082c9190612c86565b6040516323b872dd60e01b8152336004820152306024820152604481018290529092506001600160a01b03881691506323b872dd906064016020604051808303816000875af1158015610883573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a79190612cb4565b6108c4576040516312171d8360e31b815260040160405180910390fd5b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820183905287169063095ea7b3906044016020604051808303816000875af1158015610933573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109579190612cb4565b506040516306cb898360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906306cb8983906109ae908a908a908a908a908a908a90600401612d53565b600060405180830381600087803b1580156109c857600080fd5b505af11580156109dc573d6000803e3d6000fd5b5050505050505050505050565b34600003610a0a5760405163356680b760e01b815260040160405180910390fd5b3460056000828254610a1c91906126cb565b9091555050336000908152600b602052604081208054349290610a409084906126cb565b909155505060405134815233907ff6f389e2ea92f4038cd331306f11337f16086e9eac150cbcbf14eaa98a0b0ffb9060200160405180910390a2565b6001546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610ad3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af79190612cb4565b610b14576040516312171d8360e31b815260040160405180910390fd5b336000908152600a602052604081208054839290610b339084906126cb565b925050819055508060066000828254610b4c91906126cb565b909155505060405181815233907f36e229bdaedfa85d503535ae31c3ac9e40d88f1ab4fa53870ef2da82df48e990906020015b60405180910390a250565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bd2576040516282b42960e81b815260040160405180910390fd5b7f1db2949e4142fe8b641ad8aad998e42b8968ccf18acb94c49c4c9f5d67eaa92781604051610c019190612e01565b60405180910390a150565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166396834ad36002546040518263ffffffff1660e01b8152600401610c6191815260200190565b608060405180830381865afa158015610c7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca29190612ec8565b80516060909101516001600160401b0390911694909350915050565b6009805460009182610ccf83612f44565b90915550600081815260086020526040902060010180546001600160a01b031916331790559050610d0284848484611764565b50505050565b8060095481101580610d315750600081815260086020526040902060060154610100900460ff16155b15610d4f5760405163af61069360e01b815260040160405180910390fd5b600082815260086020526040902060018101546001600160a01b03163314610d89576040516282b42960e81b815260040160405180910390fd5b60068101805461ff0019811690915560019060ff1681811115610dae57610dae612b53565b03610e2557600281015460018201546001600160a01b03166000908152600b602052604081208054909190610de49084906126cb565b9091555050600281015460018201546001600160a01b03166000908152600d602052604081208054909190610e1a908490612f5d565b90915550610eb29050565b6000620f424082600301548360020154610e3f9190612f70565b610e499190612f87565b60018301546001600160a01b03166000908152600a6020526040812080549293508392909190610e7a9084906126cb565b909155505060018201546001600160a01b03166000908152600c602052604081208054839290610eab908490612f5d565b9091555050505b60405183907f61b9399f2f0f32ca39ce8d7be32caed5ec22fe07a6daba3a467ed479ec60658290600090a2505050565b336000908152600b6020526040902054811115610f125760405163356680b760e01b815260040160405180910390fd5b806005541015610f355760405163356680b760e01b815260040160405180910390fd5b336000908152600b602052604081208054839290610f54908490612f5d565b925050819055508060056000828254610f6d9190612f5d565b9091555050604051600090339083908381818185875af1925050503d8060008114610fb4576040519150601f19603f3d011682016040523d82523d6000602084013e610fb9565b606091505b505090508061101a57336000908152600b602052604081208054849290610fe19084906126cb565b925050819055508160056000828254610ffa91906126cb565b925050819055506040516312171d8360e31b815260040160405180910390fd5b60405182815233907f97d3cdd2b1f7e0e603ddc33073045d3f3defbcd5b4c07a834f86892d159710389060200160405180910390a25050565b336000908152600a60205260409020548111156110835760405163356680b760e01b815260040160405180910390fd5b8060065410156110a65760405163356680b760e01b815260040160405180910390fd5b336000908152600a6020526040812080548392906110c5908490612f5d565b9250508190555080600660008282546110de9190612f5d565b909155505060015460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015611134573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111589190612cb4565b611175576040516312171d8360e31b815260040160405180910390fd5b60405181815233907f0d1589f631deb2542273b007140b132a18d48a4303d103fe64d353db07e01b5790602001610b7f565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111ef576040516282b42960e81b815260040160405180910390fd5b6000600482106112005750813560e01c5b63c982bb2760e01b6001600160e01b031982160161125957600954600484013590811080156112455750600081815260086020526040902060060154610100900460ff165b1561125357611253816114ed565b506112de565b7f39f8c79736fed93bca390bb3d6ff7da07482edb61cd7dafcfba496821d6ab7a36040516112d5906040808252601290820152712432b636379037b7102d32ba30a1b430b4b760711b60608201526080602082018190526010908201526f5265636569766564206d65737361676560801b60a082015260c00190565b60405180910390a15b505050505050565b6007546001600160a01b03163314611310576040516282b42960e81b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611377573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139b9190612fa9565b9050806000036113be5760405163356680b760e01b815260040160405180910390fd5b60075460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af1158015611432573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114569190612cb4565b611473576040516312171d8360e31b815260040160405180910390fd5b50565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146114be576040516282b42960e81b815260040160405180910390fd5b7fa7a2dd1f61a16e9be16558337ccaf27e4bb90761ccfab75065f0003f25a1403781604051610c019190612fc2565b80600954811015806115165750600081815260086020526040902060060154610100900460ff16155b156115345760405163af61069360e01b815260040160405180910390fd5b60008281526008602052604081209061154b610c0c565b509050611559816064612f70565b905060006001600684015460ff16600181111561157857611578612b53565b0361158b57506004820154811015611595565b5060038201548111155b60038301546004840154604080518581526020810193909352820152811515606082015285907f5f4075d4a73b8c52158e90425d0d467d34b5cf3f5296c6c6e7a72b4f9d64544e9060800160405180910390a280156115fd576115f8858361195c565b611606565b6116068561207e565b5050505050565b6000620f424061161d8587612f70565b6116279190612f87565b336000908152600a602052604090205490915081111561165a5760405163356680b760e01b815260040160405180910390fd5b6103e882111561167d5760405163af61069360e01b815260040160405180910390fd5b600980546000918261168e83612f44565b90915550600081815260086020526040902060010180546001600160a01b0319163317905590506112de86868686856123a5565b6007546001600160a01b031633146116ec576040516282b42960e81b815260040160405180910390fd5b6001600160a01b038116611712576040516282b42960e81b815260040160405180910390fd5b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000818152600860209081526040808320600101546001600160a01b0316808452600b90925282205490918190036117af5760405163356680b760e01b815260040160405180910390fd5b6103e88411156117d25760405163af61069360e01b815260040160405180910390fd5b6001600160a01b0382166000908152600b6020526040812080548392906117fa908490612f5d565b90915550506001600160a01b0382166000908152600d6020526040812080548392906118279084906126cb565b909155505060408051610100810182528481526001600160a01b038481166020808401918252838501868152606085018c8152608086018c815260a087018c8152600160c0890181815260e08a0182905260008e815260089097529990952088518155955186860180546001600160a01b0319169190981617909655915160028501555160038401555160048301559151600582015592516006840180549394939192909160ff19169083818111156118e2576118e2612b53565b021790555060e08201518160060160016101000a81548160ff021916908315150217905550905050816001600160a01b0316837fbca4816edaab33691a6807e1676a051d59ee0cfdaf4854d8a8a4785025b27cfd6001848a8a60405161194b949392919061305d565b60405180910390a36112de836114ed565b60008281526008602052604090206001600682015460ff16600181111561198557611985612b53565b03611c095760006402540be40082600501546127106119a49190612f5d565b836004015484600201546119b89190612f70565b6119c29190612f70565b6119cc9190612f87565b6040805160e081018252735f0b1a82749cb4e2278ec87f8bf6b618dc71a8bf81526001546001600160a01b03166020820152309181019190915290915060009060608101611a1c426103846126cb565b8152600285015460208201819052604080830186905260006060909301839052915491516304c76d0d60e31b81529293506001600160a01b039091169163263b68689190611a6e908590600401613086565b60206040518083038185885af193505050508015611aa9575060408051601f3d908101601f19168201909252611aa691810190612fa9565b60015b611ab6576116068561207e565b82811015611ac7576112de8661207e565b60018401546001600160a01b03166000908152600a602052604081208054839290611af39084906126cb565b9091555050600284015460018501546001600160a01b03166000908152600d602052604081208054909190611b29908490612f5d565b925050819055508060066000828254611b4291906126cb565b9091555050600284015460058054600090611b5e908490612f5d565b9091555050600154600285015460408051600081526001600160a01b039093166020840152820152606081018290527fe3a6c3905c6f07647dc87b04150250121d312e6273863eb41ab1d8001132dc469060800160405180910390a1857fc12f92cbba8a6bc549f0a1c14d4fc0e716850e8ce0b8371d61247ea355f5ea38866001604051611bed9291906130df565b60405180910390a2611c008660006125c1565b6112de8661207e565b6000620f424082600301548360020154611c239190612f70565b611c2d9190612f87565b905060006127108360050154612710611c469190612f5d565b8460020154611c559190612f70565b611c5f9190612f87565b60015460005460405163095ea7b360e01b81526001600160a01b03918216600482015260248101869052929350169063095ea7b3906044016020604051808303816000875af1158015611cb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cda9190612cb4565b506040805160e0810182526001546001600160a01b03168152735f0b1a82749cb4e2278ec87f8bf6b618dc71a8bf6020820152309181019190915260009060608101611d28426103846126cb565b81526020810185905260408082018590526000606090920182905290549051630109bc7360e71b81529192506001600160a01b0316906384de398090611d72908490600401613086565b6020604051808303816000875af1925050508015611dad575060408051601f3d908101601f19168201909252611daa91810190612fa9565b60015b611e37576001546000805460405163095ea7b360e01b81526001600160a01b03918216600482015260248101929092529091169063095ea7b3906044016020604051808303816000875af1158015611e09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e2d9190612cb4565b506112de8661207e565b82811015611ece576001546000805460405163095ea7b360e01b81526001600160a01b03918216600482015260248101929092529091169063095ea7b3906044016020604051808303816000875af1158015611e97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ebb9190612cb4565b50611ec58761207e565b50505050505050565b60018501546001600160a01b03166000908152600b602052604081208054839290611efa9084906126cb565b909155505060018501546001600160a01b03166000908152600d602052604081208054839290611f2b908490612f5d565b925050819055508060056000828254611f4491906126cb565b925050819055508360066000828254611f5d9190612f5d565b90915550506001546000805460405163095ea7b360e01b81526001600160a01b03918216600482015260248101929092529091169063095ea7b3906044016020604051808303816000875af1158015611fba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fde9190612cb4565b50600154604080516001600160a01b039092168252600060208301528101859052606081018290527fe3a6c3905c6f07647dc87b04150250121d312e6273863eb41ab1d8001132dc469060800160405180910390a1867fc12f92cbba8a6bc549f0a1c14d4fc0e716850e8ce0b8371d61247ea355f5ea388760006040516120669291906130df565b60405180910390a26120798760016125c1565b611ec5875b60408051808201825262030d4080825260006020808401829052845160a08101865282815280820183905280860183905285519182018652828252606081019190915260808101929092528251935163fc5fecd560e01b8152600481019490945291929091906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063fc5fecd5906024016040805180830381865afa158015612134573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121589190612c86565b6040516370a0823160e01b81523060048201529092508291506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156121c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e69190612fa9565b10156122055760405163356680b760e01b815260040160405180910390fd5b60008460405160240161221a91815260200190565b60408051601f19818403018152918152602080830180516001600160e01b031663367d44d960e01b179052905191925060009161225a91600491016130f3565b60408051601f19818403018152908290526306cb898360e01b825291506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906306cb8983906122de9084907f00000000000000000000000000000000000000000000000000000000000000009087908b908b90600401613192565b600060405180830381600087803b1580156122f857600080fd5b505af1925050508015612309575060015b6123265760405163337a511360e21b815260040160405180910390fd5b7f39f8c79736fed93bca390bb3d6ff7da07482edb61cd7dafcfba496821d6ab7a36040516112d5906040808252601490820152732d32ba30a437b83832b91d2d32ba30a1b430b4b760611b6060820152608060208201819052601190820152704f7574626f756e642043616c6c6261636b60781b60a082015260c00190565b6000818152600860205260408120600101546001600160a01b031690620f42406123cf8789612f70565b6123d99190612f87565b6001600160a01b0383166000908152600a60205260409020549091508111156124155760405163356680b760e01b815260040160405180910390fd5b6103e88411156124385760405163af61069360e01b815260040160405180910390fd5b6001600160a01b0382166000908152600a602052604081208054839290612460908490612f5d565b90915550506001600160a01b0382166000908152600c60205260408120805483929061248d9084906126cb565b909155505060408051610100810182528481526001600160a01b0384811660208084019182528385018c8152606085018c8152608086018c815260a087018c8152600060c08901818152600160e08b018190528e8352600890975299902088518155955186860180546001600160a01b0319169190981617909655915160028501555160038401555160048301559151600582015592516006840180549394939192909160ff191690838181111561254757612547612b53565b021790555060e08201518160060160016101000a81548160ff021916908315150217905550905050816001600160a01b0316837fbca4816edaab33691a6807e1676a051d59ee0cfdaf4854d8a8a4785025b27cfd60008a8a8a6040516125b0949392919061305d565b60405180910390a3611ec5836114ed565b60018160018111156125d5576125d5612b53565b0361260857600082815260086020526040902060038101546004820154600590920154612603929085611764565b61267f565b600082815260086020908152604080832060038101546001909101546001600160a01b03168452600a909252822054620f42409161264591612f70565b61264f9190612f87565b60008481526008602052604090206003810154600482015460059092015492935061267d92849290876123a5565b505b6000828152600860205260409020600601805482919060ff1916600183818111156126ac576126ac612b53565b02179055505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156126de576126de6126b5565b92915050565b6000815180845260005b8181101561270a576020818501810151868301820152016126ee565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061273d60208301846126e4565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171561277c5761277c612744565b60405290565b604051608081016001600160401b038111828210171561277c5761277c612744565b600082601f8301126127b557600080fd5b81356001600160401b038111156127ce576127ce612744565b604051601f8201601f19908116603f011681016001600160401b03811182821017156127fc576127fc612744565b60405281815283820160200185101561281457600080fd5b816020850160208301376000918101602001919091529392505050565b6001600160a01b038116811461147357600080fd5b60008083601f84011261285857600080fd5b5081356001600160401b0381111561286f57600080fd5b60208301915083602082850101111561288757600080fd5b9250929050565b801515811461147357600080fd5b600060a082840312156128ae57600080fd5b60405160a081016001600160401b03811182821017156128d0576128d0612744565b60405290508082356128e181612831565b815260208301356128f18161288e565b6020820152604083013561290481612831565b604082015260608301356001600160401b0381111561292257600080fd5b61292e858286016127a4565b606083015250608092830135920191909152919050565b60008060008060008086880360c081121561295f57600080fd5b87356001600160401b0381111561297557600080fd5b6129818a828b016127a4565b975050602088013561299281612831565b955060408801356001600160401b038111156129ad57600080fd5b6129b98a828b01612846565b9096509450506040605f19820112156129d157600080fd5b506129da61275a565b6060880135815260808801356129ef8161288e565b6020820152915060a08701356001600160401b03811115612a0f57600080fd5b612a1b89828a0161289c565b9150509295509295509295565b600060208284031215612a3a57600080fd5b5035919050565b600060208284031215612a5357600080fd5b81356001600160401b03811115612a6957600080fd5b820160c0818503121561273d57600080fd5b600080600060608486031215612a9057600080fd5b505081359360208301359350604090920135919050565b600080600080600060808688031215612abf57600080fd5b85356001600160401b03811115612ad557600080fd5b860160608189031215612ae757600080fd5b94506020860135612af781612831565b93506040860135925060608601356001600160401b03811115612b1957600080fd5b612b2588828901612846565b969995985093965092949392505050565b600060208284031215612b4857600080fd5b813561273d81612831565b634e487b7160e01b600052602160045260246000fd5b60028110612b8757634e487b7160e01b600052602160045260246000fd5b9052565b8881526001600160a01b038816602082015260408101879052606081018690526080810185905260a081018490526101008101612bcb60c0830185612b69565b82151560e08301529998505050505050505050565b600060208284031215612bf257600080fd5b81356001600160401b03811115612c0857600080fd5b82016080818503121561273d57600080fd5b60008060008060808587031215612c3057600080fd5b5050823594602084013594506040840135936060013592509050565b600181811c90821680612c6057607f821691505b602082108103612c8057634e487b7160e01b600052602260045260246000fd5b50919050565b60008060408385031215612c9957600080fd5b8251612ca481612831565b6020939093015192949293505050565b600060208284031215612cc657600080fd5b815161273d8161288e565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60018060a01b03815116825260208101511515602083015260018060a01b0360408201511660408301526000606082015160a06060850152612d3f60a08501826126e4565b608093840151949093019390935250919050565b60c081526000612d6660c08301896126e4565b6001600160a01b03881660208401528281036040840152612d88818789612cd1565b85516060850152602086015115156080850152905082810360a0840152612daf8185612cfa565b9998505050505050505050565b6000808335601e19843603018112612dd357600080fd5b83016020810192503590506001600160401b03811115612df257600080fd5b80360382131561288757600080fd5b60408152601260408201527120b137b93a1037b7102d32ba30a1b430b4b760711b6060820152608060208201526000612e3a8384612dbc565b60c06080850152612e5061014085018284612cd1565b9150506020840135612e6181612831565b6001600160a01b031660a0840152604084013560c08401526060840135612e878161288e565b151560e08401526080840135610100840152612ea660a0850185612dbc565b848303607f1901610120860152612ebe838284612cd1565b9695505050505050565b60006080828403128015612edb57600080fd5b506000612ee6612782565b83518060070b8114612ef6578283fd5b815260208401516001600160401b0381168114612f11578283fd5b60208201526040840151600381900b8114612f2a578283fd5b604082015260609384015193810193909352509092915050565b600060018201612f5657612f566126b5565b5060010190565b818103818111156126de576126de6126b5565b80820281158282048414176126de576126de6126b5565b600082612fa457634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215612fbb57600080fd5b5051919050565b6040815260136040820152722932bb32b93a1037b7102d32ba30a1b430b4b760691b60608201526080602082015260008235612ffd81612831565b6001600160a01b03166080830152602083013561301981612831565b6001600160a01b031660a0830152604083013560c083015261303e6060840184612dbc565b608060e085015261305461010085018284612cd1565b95945050505050565b6080810161306b8287612b69565b84602083015283604083015282606083015295945050505050565b81516001600160a01b039081168252602080840151821690830152604080840151821690830152606080840151908301526080808401519083015260a0838101519083015260c092830151169181019190915260e00190565b8281526040810161273d6020830184612b69565b6000808354818160011c9050600182168061310f57607f821691505b60208210810361312d57634e487b7160e01b84526022600452602484fd5b808015613141576001811461315657613186565b60ff1984168752821515830287019450613186565b60008881526020902060005b8481101561317e57815489820152600190910190602001613162565b505082870194505b50929695505050505050565b60c0815260006131a560c08301886126e4565b6001600160a01b038716602084015282810360408401526131c681876126e4565b85516060850152602086015115156080850152905082810360a08401526131ed8185612cfa565b9897505050505050505056fea2646970667358221220e14e93df0ddd725d7bf8a4c12bec60a06ba40936a3188df4c1358f0e337084a864736f6c634300081a0033","abi":[{"inputs":[{"internalType":"address payable","name":"gatewayAddress","type":"address"},{"internalType":"address","name":"pythOracleAddress","type":"address"},{"internalType":"address","name":"swapRouterAddress","type":"address"},{"internalType":"address","name":"_usdcToken","type":"address"},{"internalType":"bytes32","name":"_zetaPriceId","type":"bytes32"},{"internalType":"address","name":"_callbackChain","type":"address"},{"internalType":"bytes","name":"_callbackAddress","type":"bytes"},{"internalType":"address","name":"_connectedGasZRC20","type":"address"},{"internalType":"address","name":"_owner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"InsufficientFunds","type":"error"},{"inputs":[],"name":"InvalidOrder","type":"error"},{"inputs":[],"name":"OrderNotActive","type":"error"},{"inputs":[],"name":"PriceCheckFailed","type":"error"},{"inputs":[{"internalType":"uint256","name":"expectedAmount","type":"uint256"},{"internalType":"uint256","name":"receivedAmount","type":"uint256"},{"internalType":"uint256","name":"slippageBps","type":"uint256"}],"name":"SlippageExceeded","type":"error"},{"inputs":[],"name":"SwapFailed","type":"error"},{"inputs":[],"name":"TransferFailed","type":"error"},{"inputs":[],"name":"Unauthorized","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"","type":"string"},{"components":[{"internalType":"bytes","name":"sender","type":"bytes"},{"internalType":"address","name":"asset","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bool","name":"outgoing","type":"bool"},{"internalType":"uint256","name":"chainID","type":"uint256"},{"internalType":"bytes","name":"revertMessage","type":"bytes"}],"indexed":false,"internalType":"struct AbortContext","name":"","type":"tuple"}],"name":"AbortEvent","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"","type":"string"},{"indexed":false,"internalType":"string","name":"","type":"string"}],"name":"HelloEvent","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"orderId","type":"uint256"}],"name":"OrderCancelled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"orderId","type":"uint256"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"enum ZetaOrderBook.OrderType","name":"orderType","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"priceLow","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"priceHigh","type":"uint256"}],"name":"OrderCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"orderId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"executionPrice","type":"uint256"},{"indexed":false,"internalType":"enum ZetaOrderBook.OrderType","name":"orderType","type":"uint8"}],"name":"OrderExecuted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"orderId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"currentPrice","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"targetPriceLow","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"targetPriceHigh","type":"uint256"},{"indexed":false,"internalType":"bool","name":"conditionsMet","type":"bool"}],"name":"PriceChecked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"","type":"string"},{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"asset","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"revertMessage","type":"bytes"}],"indexed":false,"internalType":"struct RevertContext","name":"","type":"tuple"}],"name":"RevertEvent","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"tokenIn","type":"address"},{"indexed":false,"internalType":"address","name":"tokenOut","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountIn","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountOut","type":"uint256"}],"name":"SwapCompleted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"UsdcDeposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"UsdcWithdrawn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ZetaDeposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"ZetaWithdrawn","type":"event"},{"inputs":[{"internalType":"bytes","name":"receiver","type":"bytes"},{"internalType":"address","name":"zrc20","type":"address"},{"internalType":"bytes","name":"message","type":"bytes"},{"components":[{"internalType":"uint256","name":"gasLimit","type":"uint256"},{"internalType":"bool","name":"isArbitraryCall","type":"bool"}],"internalType":"struct CallOptions","name":"callOptions","type":"tuple"},{"components":[{"internalType":"address","name":"revertAddress","type":"address"},{"internalType":"bool","name":"callOnRevert","type":"bool"},{"internalType":"address","name":"abortAddress","type":"address"},{"internalType":"bytes","name":"revertMessage","type":"bytes"},{"internalType":"uint256","name":"onRevertGasLimit","type":"uint256"}],"internalType":"struct RevertOptions","name":"revertOptions","type":"tuple"}],"name":"call","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"callbackAddress","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"callbackChain","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"orderId","type":"uint256"}],"name":"cancelOrder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"orderId","type":"uint256"}],"name":"checkAndExecuteOrder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"connectedGasZRC20","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"contractUsdcBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"contractZetaBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"zetaAmount","type":"uint256"},{"internalType":"uint256","name":"targetPriceLow","type":"uint256"},{"internalType":"uint256","name":"targetPriceHigh","type":"uint256"},{"internalType":"uint256","name":"slippageBps","type":"uint256"}],"name":"createBuyOrder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"targetPriceLow","type":"uint256"},{"internalType":"uint256","name":"targetPriceHigh","type":"uint256"},{"internalType":"uint256","name":"slippageBps","type":"uint256"}],"name":"createSellOrder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"depositUsdc","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"depositZeta","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"gateway","outputs":[{"internalType":"contract GatewayZEVM","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getZetaPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nextOrderId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes","name":"sender","type":"bytes"},{"internalType":"address","name":"asset","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bool","name":"outgoing","type":"bool"},{"internalType":"uint256","name":"chainID","type":"uint256"},{"internalType":"bytes","name":"revertMessage","type":"bytes"}],"internalType":"struct AbortContext","name":"context","type":"tuple"}],"name":"onAbort","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes","name":"origin","type":"bytes"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"chainID","type":"uint256"}],"internalType":"struct MessageContext","name":"context","type":"tuple"},{"internalType":"address","name":"zrc20","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"message","type":"bytes"}],"name":"onCall","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"asset","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"revertMessage","type":"bytes"}],"internalType":"struct RevertContext","name":"context","type":"tuple"}],"name":"onRevert","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"orders","outputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"priceLow","type":"uint256"},{"internalType":"uint256","name":"priceHigh","type":"uint256"},{"internalType":"uint256","name":"slippage","type":"uint256"},{"internalType":"enum ZetaOrderBook.OrderType","name":"orderType","type":"uint8"},{"internalType":"bool","name":"active","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pythOracle","outputs":[{"internalType":"contract IPyth","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"swapRouter","outputs":[{"internalType":"contract INativeSwapRouter","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"sweepConnectedGas","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"usdcToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"userUsdcBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"userUsdcBalanceLocked","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"userZetaBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"userZetaBalanceLocked","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdrawUsdc","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdrawZeta","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"zetaPriceId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}]}